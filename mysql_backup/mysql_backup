#!/bin/sh

#Usage: mysql_backup var1=val1 var2=val2 ...

#Necessary variables:
#slavedir - path to slave dir data
#masterdir - path to master dir data
#host - ssh host
#port - ssh port
#user - ssh user

#Optional variables:
#rsync - path to rsync program
#mysqlbinlog - path to mysqlbinlog program
#mysql - path to mysql program
#backupmasterlog - flag, make backup of downloaded master binary logs or not
#mysqlslaveopts - options for running slave mysql program
#mysqlmasteropts - options for running master mysql program
#mysqlbinlogopts - options for mysqlbinlog program
#flushlogs - flag, flush logs on master or not
#makedump - flag, make dump for changed tables or not
#mysqldump -  path to mysqldump program
#dumpopts - options for mysqldump
#commitdump - flag, commit created dumps to svn or not
#svn - path to svn program

umask 0077

serverdir="/home/www/server/"

rsyncopt="-vrlcpz --ignore-existing --compress-level=9"

dumpopts="--no-create-info --order-by-primary --replace --single-transaction --skip-opt \
		  --tz-utc --verbose --skip-comments --add-locks --skip-add-drop-table \
		  --complete-insert --default-character-set=utf8"

lockdircreated=0

slavestarted=0

startslave()
{
	echo -n "Start slave..."
	$slavedir/init.d start
	endsif "Cant start slave"
	slavestarted=1
	echo "DONE"
}

stopslave()
{
	if [ "$slavestarted" = "1" ]
	then
		echo -n "Stop slave..."
		$slavedir/init.d stop
		echo "DONE"
	fi
}

end()
{
	echo $1
	if [ $lockdircreated = "1" ]
	then
		rmdir $mastersyncdir
	fi
	stopslave
	exit 1
}

endif()
{
	if [ $? != "0" ]
	then
		end "$1 (exit status $?)"
	fi
}

ends()
{
	echo "$1 (exit status $?) Terminating without removing semaphore directory."
	stopslave
	exit 1
}

endsif()
{
	if [ $? != "0" ]
	then
		ends "$1"
	fi
}

echo "Parse paramenters..."
counter=1
while [ "$counter" -le "$#" ]
do
	var=`eval echo '$'$counter`
	assignpos=`expr index $var "="`
	if [ $assignpos != "0" ]
	then
		varname=`echo $var | sed 's/\([^=]*\)=\(.*\)/\1/'`
		varval=`echo $var | sed 's/\([^=]*\)=\(.*\)/\2/'`
		eval $varname='$varval' 2>/dev/null
	else
		eval $var='1' 2>/dev/null
	fi
	counter=`expr $counter + 1`
done
echo "Done Parsing parameters"
if [ "x$masterdir" = "x" ]
then
	end 'Need path to master.'
fi

if [ "x$slavedir" = "x" ]
then
	end 'Need path to slave.'
fi

echo -n "Try to create directory-semaphore..."
mastersyncdir="$slavedir/log/mastersync"
mkdir $mastersyncdir
if [ "$?" != "0" ]
then
	end "Cant create $mastersyncdir. May be another instance of this script already running,"\
		" or previous terminated without removing semaphore directory."
fi
lockdircreated=1
echo "DONE"

trap 'end "You terminated the script."' TERM INT

if [ "x$mysqlbinlog" = "x" ]
then
	echo -n "Looking for mysqlbinlog..."
	if [ -e ${serverdir}build/mysql/bin/mysqlbinlog ]
	then
		mysqlbinlog="${serverdir}build/mysql/bin/mysqlbinlog"
	elif [ "x`which mysqlbinlog`" != 'x' ]
	then
		mysqlbinlog="mysqlbinlog"
	else
		end "Need mysqlbinlog."
	fi
	echo $mysqlbinlog
fi

if [ "x$mysqldump" = "x" ]
then
	echo -n "Looking for mysqldump..."
	if [ -e ${serverdir}build/mysql/bin/mysqldump ]
	then
		mysqldump="${serverdir}build/mysql/bin/mysqldump"
	elif [ "x`which mysqldump`" != 'x' ]
	then
		mysqldump="mysqldump"
	else
		end "Need mysqldump."
	fi
	echo $mysqldump
fi

if [ "$commitdump" = "1" -a "x$svn" = "x" ]
then
	echo -n "Looking for svn..."
	if [ -e ${serverdir}build/mysql/bin/svn ]
	then
		svn="${serverdir}build/mysql/bin/svn"
	elif [ "x`which svn`" != 'x' ]
	then
		svn="svn"
	else
		end "Need svn."
	fi
	echo $svn
fi

if [ "x$mysql" = "x" ]
then
	echo -n "Looking for mysql..."
	if [ -e ${serverdir}build/mysql/bin/mysql ]
	then
		mysql="${serverdir}build/mysql/bin/mysql"
	elif [ "x`which mysql`" != 'x' ]
	then
		mysql="mysql"
	else
		end "Need mysql."
	fi
	echo $mysql
fi

if [ "x$rsync" = "x" ]
then
	echo -n "Looking for rsync..."
	if [ -e ${serverdir}build/rsync/bin/rsync ]
	then
		rsync="${serverdir}build/rsync/bin/rsync"
	elif [ "x`which mysqlbinlog`" != 'x' ]
	then
		rsync="rsync"
	else
		end "Need rsync."
	fi
	echo $rsync
fi

if [ "x$host" != "x" ]
then
	ssh="ssh"
	if [ "x$port" != "x" ]
	then
		ssh="$ssh -p$port"
	fi
	if [ "x$user" != "x" ]
	then
		ssh="$ssh -l$user"
	fi
	echo "ssh = $ssh"
fi

if [ "$flushlogs" = "1" ]
then
	echo -n "Try to flush logs..."
	flushlogscmd="$masterdir/init.d flush-logs"
	if [ "x$ssh" != "x" ]
	then
		$ssh $host $flushlogscmd
	else
		$flushlogscmd
	fi
	endif "Cant flush master logs."
	echo "DONE"
fi

echo -n "Get current master binary log file name..."
mysqlmasteropts="$mysqlmasteropts --defaults-file=$masterdir/conf/my.cnf"
lastlog=""
lastlogcmd="$mysql $mysqlmasteropts -e 'show master status' -EN | head -n 2 | tail -n 1"
if [ "x$ssh" != "x" ]
then
	lastlogcmd="$ssh $host $lastlogcmd"
fi
lastlog="`eval $lastlogcmd`"
endif "Cant get current master binary log file name"
echo $lastlog

echo -n "Run rsync..."
if [ "x$lastlog" != "x" ]
then
	rsyncopt="$rsyncopt --exclude=$lastlog"
fi

if [ "x$ssh" != "x" ]
then
	$rsync $rsyncopt -e "$ssh" $host:$masterdir/log/bin/ $slavedir/masterlog/
else
	$rsync $rsyncopt $masterdir/log/bin/ $slavedir/masterlog/
fi
endif "Rsync error($?)."
echo "DONE"

logs=`find $slavedir/masterlog/ -size +0 -type f -printf "%f\n" | sort`
if [ "x$logs" != "x" ]
then
	startslave

	echo "Start processing binary logs"
	mysqlslaveopts="$mysqlslaveopts --defaults-file=$slavedir/conf/my.cnf"
	mysqlbinlogopts="$mysqlbinlogopts --verbose"
	starttime="`date +%s`"
	for file in $logs
	do
		logfile="$slavedir/masterlog/$file"
		sqlfile="$slavedir/sql/$file.sql"
		echo -n "Create dump from $logfile..."
		$mysqlbinlog $mysqlbinlogopts $logfile > $sqlfile
		endsif "Cant create dump from $file"
		echo "DONE"
		echo -n "Import $sqlfile..."
		$mysql $mysqlslaveopts < $sqlfile
		endsif "Cant import $sqlfile"
		echo "DONE"
		if [ "$backupmasterlog" = "1" ]
		then
			echo -n "Backup $logfile..."
			cp $logfile $slavedir/masterlogbackup/
			endsif "Cant backup $logfile"
			echo "DONE"
		fi
		echo -n > $logfile
	done
	echo "Done processing binary logs"
else
	echo "There are no new logs"
fi

if [ "$makedump" = "1" ]
then
	stopslave
	startslave
	echo "Start making dumps for changed tables"
	echo -n "Try to flush and lock tables on slave..."
	$mysql $mysqlslaveopts -e "FLUSH TABLES WITH READ LOCK"
	endsif "Cant flush tables."
	echo "DONE"
	stoptime=`date +%s`
	mins="`expr \( $stoptime - $starttime \) / 60 + 1`"
	try=20
	fl=""
	echo -n "Find changed tables($try seconds) "
	while test $try -gt 0 ; do
		echo -n "$try "
		fl=`find $slavedir/data/db/ -type f -mmin -$mins | \
			sed 's/.*\/\([^\/]\+\)\/\([^\/]\+\)$/\1.\2/' | sed 's/\.[^\.]\+$//' | sort | uniq`
		if [ "x$fl" != "x" ]
		then
			echo -n "\nChanged tables: $fl"
			break
		fi
		try=`expr $try - 1`
		sleep 1
	done
	echo
	for dbtable in $fl
	do
		dbname=`echo $dbtable | sed 's/\([^\.]*\)\.\(.*\)/\1/'`
		table=`echo $dbtable | sed 's/\([^\.]*\)\.\(.*\)/\2/'`
		if [ -e $slavedir/dumps/$dbname/ ]
		then
			echo -n "Make dump for table $table in $dbname database..."
			$mysqldump $dumpopts $dbname $table > $slavedir/dumps/$dbname/$table.sql
			endsif "Cant create dump for $dbname.$table"
			echo "DONE"
		fi
	done
	echo -n 'Unlock tables...'
	$mysql $mysqlslaveopts -e "UNLOCK TABLES"
	echo 'DONE'
	if [ "$commitdump" = "1" -a "x`$svn st $slavedir/dumps`" != "x" ]
	then
		echo -n "Commit changed tables..."
		$svn ci $slavedir/dumps -m "Incremental dump of tables from `date +'%Y-%m-%d %k:%M:%S%:::z'`"
		endsif "Cant commit changed tables"
		echo "DONE"
	fi
	echo "Done making dumps for changed tables"
fi

stopslave

rmdir $mastersyncdir
exit 0

