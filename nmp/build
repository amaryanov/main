#!/bin/sh

#Requirements:
#	nginx: $wwwuser user
#	mysql: $mysqluser user
#	php:   autoconf >= 2.13, g++, www user
#Recommendation:
#set appropriate rights to directories in data: nginx, php, sites - $wwwuser

#####SCRIPT CONFIG#####
#build
nginxbuild=0
mysqlbuild=0
phpbuild=0
subversionbuild=0
rsyncbuild=0
postfixbuild=0
dkimbuild=0
maildropbuild=1
fetchmailbuild=0

#download
download=1

#symlink
nginxsym=0
mysqlsym=0
phpsym=0
subversionsym=0
rsyncsym=0
postfixsym=0
dkimsym=0
opensslsym=0
maildropsym=1
fetchmailsym=0

#configure
nginxconf=0
mysqlconf=0
mysqlbackupconf=0
phpconf=0
dkimconf=0

#rebuild
nginxreb=0
mysqlreb=0
phpreb=0
subversionreb=0
rsyncreb=0
postfixreb=0
dkimreb=0
maildropreb=0
fetchmailreb=0
zlibreb=0
opsslreb=0
curlreb=0
mcryptreb=0
mhashreb=0
libxmlreb=0
jpegreb=0
pngreb=0
ncursesreb=0
eventreb=0
iconvreb=0
aprreb="0"
aprutilreb="0"
neonreb="0"
sqlitereb="0"
libmilterreb="0"
pcrereb="0"

#users
export wwwuser="www"
export mysqluser="mysql"
postfixuser="postfix"
postdropgroup="postdrop"
#export wwwuser="`id -un`"
#export mysqluser="`id -un`"

#versions
nginxver="0.7.67"
mysqlver="5.1"
mysqlsubver="49"
mysqlfullver=$mysqlver.$mysqlsubver
phpver="5.3.3"
subversionver="1.6.12"
rsyncver="3.0.7"
postfixver="2.7.1"
maildropver="2.5.1"
fetchmailver="6.3.18"
eaccver="0.9.6.1"
zlibver="1.2.5"
opensslver="0.9.8o"
pcrever="8.10"
curlver="7.21.0"
mcryptver="2.5.8"
mhashver="0.9.9.9"
libxmlver="2.7.7"
jpegver="8b"
pngver="1.4.3"
ncursesver="5.7"
eventver="1.4.14b-stable"
iconvver="1.13.1"
aprver="1.4.2"
aprutilver="1.3.9"
neonver="0.29.3"
sqlitever="3.7.2"
dkimver="2.8.3"
sendmailver="8.14.4"
#####END SCRIPT CONFIG#####

scriptdir=$(cd `dirname $0` && pwd && cd $OLDPWD)/

topdir=$PWD/
srcdir=${topdir}src/
builddir=${topdir}build/
oldbuilddir=${builddir}old/
archdir=${topdir}arch/
export datadir=${topdir}data/
buildlog=${srcdir}log/

nginxdatadir=${datadir}nginx/
export mysqldatadir=${datadir}mysql/
export mysqlbackupdatadir=${datadir}mysql_backup/
export phpdatadir=${datadir}php/

dl()
{
	if [ $download = "1" ]
	then
		if [ "x$1" = 'x' ]
		then
			echo 'Please provide URL to download.'
			return 1
		fi
		if [ "x$3" = 'x' ]
		then
			echo 'Please provide log file'
			return 1
		fi
		#look for downloader
		if [ "x${dler}" = 'x' ]
		then
			if [ "x`which curl`" != 'x' ]
			then
				dler='curl'
			elif [ "x`which wget`" != 'x' ]
			then
				dler='wget'
			else
				echo 'I need downloader(wget or curl)'
				exit 1
			fi
		fi
		case "$dler" in
			'curl')
				echo -n "Download $1..." | tee -a $3
				res="`curl -o $2 -sLC - -w "%{size_download} %{http_code}" $1 2>>$3`"
				curlret=$?
				dlsize="`echo $res | cut -d ' ' -f 1`"
				httpcode="`echo $res | cut -d ' ' -f 2`"
				if [ $curlret = "18" -o $curlret = "0" ]
				then
					echo -n "DONE"  | tee -a $3
				else
					echo -n "There was an error while downloading $1. return code $curlret. " | tee -a $3
				fi
				echo " download size = ${dlsize}, HTTP code = ${httpcode}." | tee -a $3
				;;
			'wget')
				echo -n "Download $1..." | tee -a $3
				wget -co $2 $1 >> $3 2>&1
				if [ "$?" != "0" ]
				then
					echo "There was an error while downloading $1" | tee -a $3
				else
					echo "DONE" | tee -a $3
				fi
				;;
		esac
	fi
}

if [ $nginxbuild = "1" -a -e ${builddir}main/nginx/${nginxver} ]
then
	nginxbuild="0"
fi
if [ $nginxreb = "1" -a ! -e ${builddir}main/nginx/${nginxver} ]
then
	nginxreb=0
fi
if [ $mysqlbuild = "1" -a -e ${builddir}main/mysql/${mysqlfullver} ]
then
	mysqlbuild="0"
fi
if [ $mysqlreb = "1" -a ! -e ${builddir}main/mysql/${mysqlfullver} ]
then
	mysqlreb=0
fi
if [ $phpbuild = "1" -a -e ${builddir}main/php/${phpxver} ]
then
	phpbuild="0"
fi
if [ $phpreb = "1" -a ! -e ${builddir}main/php/${phpver} ]
then
	phpreb=0
fi
if [ $subversionbuild = "1" -a -e ${builddir}main/subversion/${subversionver} ]
then
	subversionbuild="0"
fi
if [ $subversionreb = "1" -a ! -e ${builddir}main/subversion/${subversionver} ]
then
	subversionreb=0
fi
if [ $rsyncbuild = "1" -a -e ${builddir}main/rsync/${rsyncver} ]
then
	rsyncbuild="0"
fi
if [ $rsyncreb = "1" -a ! -e ${builddir}main/rsync/${rsyncver} ]
then
	rsyncreb=0
fi
if [ $postfixbuild = "1" -a -e ${builddir}main/postfix/${postfixver} ]
then
	postfixbuild="0"
fi
if [ $postfixreb = "1" -a ! -e ${builddir}main/postfix/${postfixver} ]
then
	postfixreb=0
fi
if [ $dkimbuild = "1" -a -e ${builddir}main/dkim-milter/${dkimver} ]
then
	dkimbuild="0"
fi
if [ $dkimreb = "1" -a ! -e ${builddir}main/dkim-milter/${dkimver} ]
then
	dkimreb=0
fi
if [ $fetchmailreb = "1" -a ! -e ${builddir}main/fetchmail/${fetchmailver} ]
then
	fetchmailreb=0
fi
if [ $maildropreb = "1" -a ! -e ${builddir}main/maildrop/${maildropver} ]
then
	maildropreb=0
fi
if [ $maildropbuild = "1" -a -e ${builddir}main/maildrop/${maildropver} ]
then
	maildropbuild="0"
fi
if [ $fetchmailbuild = "1" -a -e ${builddir}main/fetchmail/${fetchmailver} ]
then
	fetchmailbuild="0"
fi
if [ $nginxbuild = "0" -a \
	$mysqlbuild = "0" -a \
	$phpbuild = "0" -a \
	$nginxreb = "0" -a \
	$mysqlreb = "0" -a \
	$phpreb = "0" -a \
	$nginxconf = "0" -a \
	$mysqlconf = "0" -a \
	$mysqlbackupconf = "0" -a \
	$phpconf = "0" -a \
	$subversionbuild = "0" -a \
	$subversionreb = "0" -a \
	$rsyncbuild = "0" -a \
	$rsyncreb = "0" -a \
	$postfixbuild = "0" -a \
	$postfixreb = "0" -a \
	$dkimbuild = "0" -a \
	$dkimreb = "0" -a \
	$dkimconf = "0" -a \
	$fetchmailbuild = "0" -a \
	$maildropbuild = "0" -a \
	$fetchmailreb = "0" -a \
	$maildropreb = "0" \
]
then
	echo 'Nothing to do.'
	exit 0
fi
#logging
mkdir -p ${buildlog}zlib/${zlibver}
zliblog=`mktemp -u ${buildlog}zlib/${zlibver}/XXX`
mkdir -p ${buildlog}openssl/${opensslver}
openssllog=`mktemp -u ${buildlog}openssl/${opensslver}/XXX`
mkdir -p ${buildlog}nginx/${nginxver}
nginxlog=`mktemp -u ${buildlog}nginx/${nginxver}/XXX`
mkdir -p ${buildlog}pcre/${pcrever}
pcrelog=`mktemp -u ${buildlog}pcre/${pcrever}/XXX`
mkdir -p ${buildlog}mysql/${mysqlfullver}
mysqllog=`mktemp -u ${buildlog}mysql/${mysqlfullver}/XXX`
mkdir -p ${buildlog}ncurses/${ncursesver}
ncurseslog=`mktemp -u ${buildlog}ncurses/${ncursesver}/XXX`
mkdir -p ${buildlog}php/${phpver}
phplog=`mktemp -u ${buildlog}php/${phpver}/XXX`
mkdir -p ${buildlog}libpng/${pngver}
libpngver=`mktemp -u ${buildlog}libpng/${pngver}/XXX`
mkdir -p ${buildlog}libjpeg/${jpegver}
libjpeglog=`mktemp -u ${buildlog}libjpeg/${jpegver}/XXX`
mkdir -p ${buildlog}libxml2/${libxmlver}
libxml2log=`mktemp -u ${buildlog}libxml2/${libxmlver}/XXX`
mkdir -p ${buildlog}mhash/${mhashver}
mhashlog=`mktemp -u ${buildlog}mhash/${mhashver}/XXX`
mkdir -p ${buildlog}libmcrypt/${mcryptver}
libmcryplog=`mktemp -u ${buildlog}libmcrypt/${mcryptver}/XXX`
mkdir -p ${buildlog}libevent/${eventver}
libeventlog=`mktemp -u ${buildlog}libevent/${eventver}/XXX`
mkdir -p ${buildlog}libiconv/${iconvver}
libiconvlog=`mktemp -u ${buildlog}libiconv/${iconvver}/XXX`
mkdir -p ${buildlog}curl/${curlver}
curllog=`mktemp -u ${buildlog}curl/${curlver}/XXX`
mkdir -p ${buildlog}subversion/${subversionver}
subversionlog=`mktemp -u ${buildlog}subversion/${subversionver}/XXX`
mkdir -p ${buildlog}apr/${aprver}
aprlog=`mktemp -u ${buildlog}apr/${aprver}/XXX`
mkdir -p ${buildlog}apr-util/${aprutilver}
aprutillog=`mktemp -u ${buildlog}apr-util/${aprutilver}/XXX`
mkdir -p ${buildlog}neon/${neonver}
neonlog=`mktemp -u ${buildlog}neon/${neonver}/XXX`
mkdir -p ${buildlog}sqlite/${sqlitever}
sqlitelog=`mktemp -u ${buildlog}sqlite/${sqlitever}/XXX`
mkdir -p ${buildlog}rsync/${rsyncver}
rsynclog=`mktemp -u ${buildlog}rsync/${rsyncver}/XXX`
mkdir -p ${buildlog}postfix/${postfixver}
postfixlog=`mktemp -u ${buildlog}postfix/${postfixver}/XXX`
mkdir -p ${buildlog}dkim-milter/${dkimver}
dkimlog=`mktemp -u ${buildlog}dkim-milter/${dkimver}/XXX`
mkdir -p ${buildlog}fetchmail/${fetchmailver}
fetchmaillog=`mktemp -u ${buildlog}fetchmail/${fetchmailver}/XXX`
mkdir -p ${buildlog}maildrop/${maildropver}
maildroplog=`mktemp -u ${buildlog}maildrop/${maildropver}/XXX`
mkdir -p ${buildlog}pcre/${pcrever}
pcrelog=`mktemp -u ${buildlog}pcre/${pcrever}/XXX`

mkdir -p $srcdir
mkdir -p $builddir
mkdir -p $archdir
mkdir -p $datadir
mkdir -p $buildlog
mkdir -p ${datadir}run
mkdir -p ${datadir}sites
chmod 777 ${datadir}run

cd $srcdir
#pcre
if  [ ! -e ${builddir}other/pcre/${pcrever} -o $pcrereb = "1" ] \
	&& [  $maildropbuild = "1" -o $maildropreb = "1"  ] \
	|| [ $nginxbuild = "1" -o $nginxreb = "1" ]
then
	echo "START BUILD pcre-"${pcrever} | tee -a $pcrelog
	if [ -e pcre-${pcrever} ]
	then
		echo -n "Clean pcre-${pcrever}..." | tee -a $pcrelog
		cd pcre-${pcrever}
			make distclean >> $pcrelog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $pcrelog
	else
		cd $archdir
			dl http://downloads.sourceforge.net/project/pcre/pcre/${pcrever}/pcre-${pcrever}.tar.gz pcre-${pcrever}.tar.gz $pcrelog
		cd $OLDPWD
		echo -n "Unpack pcre-${pcrever}..." | tee -a $pcrelog
		tar -xzvf ${archdir}pcre-${pcrever}.tar.gz >> $pcrelog 2>&1
		echo "DONE" | tee -a $pcrelog
	fi

	if [ ! -e ${builddir}other/pcre/${pcrever} -o $pcrereb = "1" ] \
		&& [ $maildropbuild = "1" -o $maildropreb = "1" ]
	then
		echo -n "Make pcre-${pcrever}..." | tee -a $pcrelog
		cd pcre-${pcrever}
			./configure --prefix=${builddir}other/pcre/${pcrever} --enable-utf8 --enable-newline-is-any >> $pcrelog 2>&1 && \
			make >> $pcrelog 2>&1 && \
			if [ -e ${builddir}other/pcre/${pcrever} ]
			then
				mkdir -p ${oldbuilddir}pcre/${pcrever}
				mv ${builddir}other/pcre/${pcrever} `mktemp -ud ${oldbuilddir}pcre/${pcrever}/XXX` >> $pcrelog 2>&1
			fi && \
			make install >> $pcrelog 2>&1 && \
			make distclean >> $pcrelog 2>&1 || exit 1 #clean for nginx
		cd $OLDPWD
		echo "DONE" | tee -a $pcrelog
	fi
	echo "DONE BUILD pcre-"${pcrever} | tee -a $pcrelog
fi
#zlib
if  [ ! -e ${builddir}other/zlib/${zlibver} -o $zlibreb = "1" ] \
	&& [ $phpbuild = "1" -o $mysqlbuild = "1" -o $subversionbuild = "1" \
		-o $phpreb = "1" -o $mysqlreb = "1" -o $subversionreb = "1" \
		-o $maildropbuild = "1" -o $maildropreb = "1" \
		-o $fetchmailbuild = "1" -o $fetchmailreb = "1" ] \
	|| [ $nginxbuild = "1" -o $nginxreb = "1" ]
then
	echo "START BUILD zlib-"${zlibver} | tee -a $zliblog
	if [ -e zlib-${zlibver} ]
	then
		echo -n "Clean zlib-${zlibver}..." | tee -a $zliblog
		cd zlib-${zlibver}
			make distclean >> $zliblog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $zliblog
	else
		cd $archdir
			dl http://zlib.net/zlib-${zlibver}.tar.gz zlib-${zlibver}.tar.gz $zliblog
		cd $OLDPWD
		echo -n "Unpack zlib-${zlibver}..." | tee -a $zliblog
		tar -xzvf ${archdir}zlib-${zlibver}.tar.gz >> $zliblog 2>&1
		echo "DONE" | tee -a $zliblog
	fi

	if [ ! -e ${builddir}other/zlib/${zlibver} -o $zlibreb = "1" ] \
		&& [ $phpbuild = "1" -o $mysqlbuild = "1" -o $subversionbuild = "1" -o $phpreb = "1" \
			-o $mysqlreb = "1" -o $subversionreb = "1" -o $maildropbuild = "1" -o $maildropreb = "1" \
			-o $fetchmailbuild = "1" -o $fetchmailreb = "1" ]
	then
		echo -n "Make zlib-${zlibver}..." | tee -a $zliblog
		cd zlib-${zlibver}
			./configure --prefix=${builddir}other/zlib/${zlibver} >> $zliblog 2>&1 && \
			make >> $zliblog 2>&1 && \
			if [ -e ${builddir}other/zlib/${zlibver} ]
			then
				mkdir -p ${oldbuilddir}zlib/${zlibver}
				mv ${builddir}other/zlib/${zlibver} `mktemp -ud ${oldbuilddir}zlib/${zlibver}/XXX` >> $zliblog 2>&1
			fi && \
			make install >> $zliblog 2>&1 && \
			make distclean >> $zliblog 2>&1 || exit 1 #clean for nginx
		cd $OLDPWD
		echo "DONE" | tee -a $zliblog
	fi
	echo "DONE BUILD zlib-"${zlibver} | tee -a $zliblog
fi
#openssl
if [ $phpbuild = "1" -o $phpreb = "1" -o $subversionbuild = "1" \
		-o $subversionreb = "1" -o $dkimbuild = "1" -o $dkimreb = "1" \
		-o $fetchmailbuild = "1" -o $maildropbuild = "1" \
		-o $fetchmailreb = "1" -o $maildropreb = "1" ] \
	&& [ ! -e ${builddir}other/openssl/${opensslver} -o $opsslreb = "1" ] \
	|| [ $nginxbuild = "1" -o $nginxreb = "1" ]
then
	echo "START BUILD openssl-${opensslver}" | tee -a $openssllog
	if [ -e openssl-${opensslver} ]
	then
		echo -n "Clean openssl-${opensslver}..." | tee -a $openssllog
		cd openssl-${opensslver}
			make clean dclean >> $openssllog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $openssllog
	else
		cd $archdir
			dl http://www.openssl.org/source/openssl-${opensslver}.tar.gz ${opensslver}.tar.gz $openssllog
		cd $OLDPWD
		echo -n "Unpack openssl-${opensslver}..." | tee -a $openssllog
		tar -xzvf ${archdir}openssl-${opensslver}.tar.gz >> $openssllog 2>&1
		echo "DONE" | tee -a $openssllog
	fi

	if [ $phpbuild = "1" -o $phpreb = "1" \
			-o $subversionbuild = "1" -o $subversionreb = "1"\
			-o $dkimbuild = "1" -o $dkimreb = "1" \
			-o $fetchmailbuild = "1" -o $maildropbuild = "1" \
			-o $fetchmailreb = "1" -o $maildropreb = "1" ] \
		&& [ ! -e ${builddir}other/openssl/${opensslver} -o $opsslreb = "1" ]
	then
		echo -n "Make openssl-${opensslver}..." | tee -a $openssllog
		cd openssl-${opensslver}
			./config --prefix=${builddir}other/openssl/${opensslver} \
				-L${builddir}other/zlib/${zlibver}/lib \
				-I${builddir}other/zlib/${zlibver}/include \
				-Wl,-rpath \
				-Wl,${builddir}other/zlib/${zlibver}/lib \
				-Wl,-rpath \
				-Wl,${builddir}other/openssl/${opensslver}/lib \
				threads zlib shared >> $openssllog 2>&1 && \
			make >> $openssllog 2>&1 && \
			make test >> $openssllog 2>&1 && \
			if [ -e ${builddir}other/openssl/${opensslver} ]
			then
				mkdir -p ${oldbuilddir}openssl/${opensslver}
				mv ${builddir}other/openssl/${opensslver} `mktemp -ud ${oldbuilddir}openssl/${opensslver}/XXX` >> $openssllog 2>&1
			fi && \
			make install >> $openssllog 2>&1 && \
			ln -s ${builddir}other/openssl/${opensslver} ${builddir}openssl && \
			make dclean >> $openssllog 2>&1 || exit 1 #clean for nginx
		cd $OLDPWD
		echo "DONE" | tee -a $openssllog
	fi
	echo "DONE BUILD openssl-${opensslver}" | tee -a $openssllog
fi

#nginx
if [ $nginxbuild = "1" -o $nginxreb = "1" ]
then
	echo "START BUILD nginx-${nginxver}" | tee -a $nginxlog
	if [ "`id -un ${wwwuser} 2>/dev/null`" != "${wwwuser}" ]
	then
		echo "Need ${wwwuser} user"
		exit 1
	fi
	if [ -e nginx-${nginxver} ]
	then
		echo -n "Clean nginx-${nginxver}..." | tee -a $nginxlog
		cd nginx-${nginxver}
			make clean >> $nginxlog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $nginxlog
	else
		cd $archdir
			dl http://sysoev.ru/nginx/nginx-${nginxver}.tar.gz nginx-${nginxver}.tar.gz $nginxlog
		cd $OLDPWD
		echo -n "Unpack nginx-${nginxver}..." | tee -a $nginxlog
		tar -xzvf ${archdir}nginx-${nginxver}.tar.gz >> $nginxlog 2>&1
		echo "DONE" | tee -a $nginxlog
	fi
	echo -n "Make nginx-${nginxver}..." | tee -a $nginxlog
	rmdata=0
	if [ ! -e ${nginxdatadir} ]
	then
		rmdata=1
	fi
	cd nginx-${nginxver}/
		./configure --prefix=${builddir}main/nginx/${nginxver} \
			--without-poll_module \
			--without-select_module \
			--without-http_ssi_module \
			--without-http_userid_module \
			--without-http_autoindex_module \
			--without-http_geo_module \
			--without-http_referer_module \
			--without-mail_pop3_module \
			--without-mail_imap_module \
			--without-mail_smtp_module \
			--conf-path=${nginxdatadir}conf/nginx.conf \
			--error-log-path=${nginxdatadir}log/error.log \
			--pid-path=${datadir}run/nginx.pid \
			--lock-path=${nginxdatadir}log/nginx.lock \
			--http-log-path=${nginxdatadir}log/access.log \
			--http-client-body-temp-path=${nginxdatadir}client_body_temp \
			--http-proxy-temp-path=${nginxdatadir}proxy_temp \
			--http-fastcgi-temp-path=${nginxdatadir}fastcgi_temp \
			--with-zlib=${srcdir}zlib-${zlibver} \
			--with-http_ssl_module \
			--with-openssl=${srcdir}openssl-${opensslver}\
			--with-pcre=${srcdir}pcre-${pcrever}  >> $nginxlog 2>&1 && \
		make >> $nginxlog 2>&1 && \
		if [ -e ${builddir}main/nginx/${nginxver} ]
		then
			mkdir -p  ${oldbuilddir}nginx/${nginxver}
			mv ${builddir}main/nginx/${nginxver} `mktemp -ud ${oldbuilddir}nginx/${nginxver}/XXX` >> $nginxlog 2>&1
		fi && \
		make install >> $nginxlog 2>&1 || exit 1
	if [ $rmdata = "1" ]
	then
		rm -rf ${nginxdatadir}
	fi
	cd $srcdir
	if [ $nginxsym = "1" ]
	then
		cd ${builddir}
			rm -f nginx
			ln -s main/nginx/${nginxver} nginx
		cd $OLDPWD
	fi
	#create symlinks for shortness config
	cd ${builddir}main/nginx/${nginxver}
		ln -s ../../../../data/nginx/log .
		ln -s ../../../../data/run .
		ln -s ../../../../data/sites .
	cd $OLDPWD
	echo "DONE" | tee -a $nginxlog
	echo "DONE BUILD nginx-${nginxver}" | tee -a $nginxlog
fi
if [ $nginxconf = "1" -a ! -e ${nginxdatadir} ]
then
	echo -n "Configure nginx-${nginxver}..." | tee -a $nginxlog
	export nginxdir=${builddir}nginx/
	mkdir -p ${nginxdatadir}
	mkdir -p ${nginxdatadir}log
	cp -r ${scriptdir}conf/nginx/conf ${nginxdatadir}
	sed 's/user www/user '${wwwuser}'/' ${nginxdatadir}conf/nginx.conf > ${nginxdatadir}conf/nginx.conf_back && \
		mv ${nginxdatadir}conf/nginx.conf_back ${nginxdatadir}conf/nginx.conf || exit
	${scriptdir}conf/nginx/init.d.sh > ${nginxdatadir}init.d
	chmod 755 ${nginxdatadir}init.d
	echo "DONE" | tee -a $nginxlog
fi

#mysql
if [ $mysqlbuild = "1" -o $mysqlreb = "1" ]
then
	echo "START BUILD mysql-${mysqlfullver}" | tee -a $mysqllog
	if [ "`id -un ${mysqluser} 2>/dev/null`" != "${mysqluser}" \
		-o "`grep -iq '^'${mysqluser}':' /etc/group && echo $? || echo $? 2>/dev/null`" != "0" ]
	then
		echo "Need ${mysqluser} user and ${mysqluser} group"
		exit 1
	fi
	if [ ! -e ${builddir}other/ncurses/${ncursesver} -o $ncursesreb = "1" ]
	then
		echo "START BUILD ncurses-${ncursesver}" | tee -a $ncurseslog
		if [ -e ncurses-${ncursesver} ]
		then
			echo -n "Clean ncurses-${ncursesver}..." | tee -a $ncurseslog
			cd ncurses-${ncursesver}
				make distclean >> $ncurseslog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $ncurseslog
		else
			cd ${archdir}
				dl http://ftp.gnu.org/pub/gnu/ncurses/ncurses-${ncursesver}.tar.gz ncurses-${ncursesver}.tar.gz $ncurseslog
			cd $OLDPWD
			echo -n "Unpack ncurses-${ncursesver}..." | tee -a $ncurseslog
			tar -xzvf ${archdir}ncurses-${ncursesver}.tar.gz >> $ncurseslog 2>&1
			echo "DONE" | tee -a $ncurseslog
		fi
		echo -n "Make ncurses-${ncursesver}..." | tee -a $ncurseslog
		cd ncurses-${ncursesver}
			./configure --prefix=${builddir}other/ncurses/${ncursesver} >> $ncurseslog 2>&1 && \
			make >> $ncurseslog 2>&1 && \
			if [ -e ${builddir}other/ncurses/${ncursesver} ]
			then
				mkdir -p ${oldbuilddir}ncurses/${ncursesver}
				mv ${builddir}other/ncurses/${ncursesver} `mktemp -ud ${oldbuilddir}ncurses/${ncursesver}/XXX` >> $ncurseslog 2>&1
			fi && \
			make install >> $ncurseslog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $ncurseslog
		echo "DONE BUILD ncurses-${ncursesver}" | tee -a $ncurseslog
	fi

	if [ -e mysql-${mysqlfullver} ]
	then
		echo -n "Clean mysql-${mysqlfullver}..." | tee -a $mysqllog
		cd mysql-${mysqlfullver}
			make distclean >> $mysqllog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $mysqllog
	else
		cd ${archdir}
			dl http://dev.mysql.com/get/Downloads/MySQL-${mysqlver}/mysql-${mysqlfullver}.tar.gz/from/http://mysql.infocom.ua/ mysql-${mysqlfullver}.tar.gz $mysqllog
		cd $OLDPWD
		echo -n "Unpack mysql-${mysqlfullver}..." | tee -a $mysqllog
		tar -xzvf ${archdir}mysql-${mysqlfullver}.tar.gz >> $mysqllog 2>&1
		echo "DONE" | tee -a $mysqllog
	fi

	export mysqlinstalldir=${builddir}main/mysql/${mysqlfullver}/ #export for mysql.conf.sh

	echo -n "Make mysql-${mysqlfullver}..." | tee -a $mysqllog
	cd  mysql-${mysqlfullver}
		CFLAGS="-O3" \
			CXXX=gcc \
			CXXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti" \
			LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib" \
			./configure --prefix=${mysqlinstalldir} \
				--with-mysqld-ldflags=-all-static \
				--with-client-ldflags=-all-static \
				--sysconfdir=${mysqldatadir}conf \
				--enable-assembler \
				--enable-thread-safe-client \
				--with-named-curses-libs=${builddir}other/ncurses/${ncursesver}/lib/libncurses.a \
				--with-charset=utf8 \
				--with-zlib-dir=${builddir}other/zlib/${zlibver} \
				--with-extra-charsets=ascii,cp1251,koi8r,latin1,latin2 \
				--with-plugins=innobase,myisam,partition,myisammrg \
				--with-unix-socket-path=${datadir}run/mysql.sock >> $mysqllog 2>&1 && \
		make >> $mysqllog 2>&1 && \
		if [ -e ${builddir}main/mysql/${mysqlfullver} ]
		then
			mkdir -p ${oldbuilddir}mysql/${mysqlfullver}
			mv ${builddir}main/mysql/${mysqlfullver} `mktemp -ud ${oldbuilddir}mysql/${mysqlfullver}/XXX` >> $mysqllog 2>&1
		fi && \
		make install >> $mysqllog 2>&1 || exit 1
	cd $OLDPWD
	if [ $mysqlsym = "1" ]
	then
		cd ${builddir}
			rm -f mysql
			ln -s main/mysql/${mysqlfullver} mysql
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $mysqllog
	echo "DONE BUILD mysql-${mysqlfullver}" | tee -a $mysqllog
fi
if [ $mysqlconf = "1" -a ! -e ${mysqldatadir} ]
then
	echo -n "Configure mysql-${mysqlfullver}..." | tee -a $mysqllog
	export mysqlinstalldir=${builddir}mysql/ #export for mysql.conf.sh
	export mysqlname="mysql"
	mkdir -p ${mysqldatadir}conf/
	mkdir -p ${mysqldatadir}tmp/
	mkdir -p ${mysqldatadir}log/bin
	mkdir -p ${mysqldatadir}log/innodb
	mkdir -p ${mysqldatadir}data/db
	mkdir -p ${mysqldatadir}data/innodb
	${scriptdir}/conf/mysql/mysql.conf.sh > ${mysqldatadir}conf/my.cnf
	${scriptdir}/conf/mysql/init.d.sh > ${mysqldatadir}init.d
	chmod 755 ${mysqldatadir}init.d
	mysqlrightsok=0
	sudo=""
	if [ $mysqluser != "`id -un`" ]
	then
		if [ "`id -un`" = "root" ]
		then
			chown -R ${mysqluser}:${mysqluser} ${mysqldatadir}
			mysqlrightsok=1
		elif [ "`which sudo`" != "" ]
			then
				sudo chown -R ${mysqluser}:${mysqluser} ${mysqldatadir}
				sudo="sudo"
				mysqlrightsok=1
		else
			echo "You will need to run chown -R ${mysqluser}:${mysqluser} ${mysqldatadir} as root." \
			" And then ${mysqlinstalldir}bin/mysql_install_db --defaults-file=${mysqldatadir}/conf/my.cnf"
		fi
	else
		mysqlrightsok=1
	fi
	if [ $mysqlrightsok = "1" ]
	then
		$sudo ${mysqlinstalldir}bin/mysql_install_db --defaults-file=${mysqldatadir}conf/my.cnf >> $mysqllog 2>&1 || exit 1
	fi
	echo "DONE" | tee -a $mysqllog
fi
if [ $mysqlbackupconf = "1" -a ! -e ${mysqlbackupdatadir} ]
then
	echo -n "Configure backup mysql-${mysqlfullver}..." | tee -a $mysqllog
	export mysqlinstalldir=${builddir}mysql/ #export for mysql.conf.sh
	export mysqldatadir=${mysqlbackupdatadir}
	export mysqlname="mysql_backup"
	mkdir -p ${mysqlbackupdatadir}conf/
	mkdir -p ${mysqlbackupdatadir}tmp/
	mkdir -p ${mysqlbackupdatadir}dumps/
	mkdir -p ${mysqlbackupdatadir}masterlog/
	mkdir -p ${mysqlbackupdatadir}masterlogbackup/
	mkdir -p ${mysqlbackupdatadir}sql/
	mkdir -p ${mysqlbackupdatadir}log/bin
	mkdir -p ${mysqlbackupdatadir}log/innodb
	mkdir -p ${mysqlbackupdatadir}data/db
	mkdir -p ${mysqlbackupdatadir}data/innodb
	${scriptdir}/conf/mysql/mysql.conf.sh > ${mysqlbackupdatadir}conf/my.cnf
	${scriptdir}/conf/mysql/init.d.sh > ${mysqlbackupdatadir}init.d
	chmod 755 ${mysqlbackupdatadir}init.d
	mysqlrightsok=0
	sudo=""
	if [ $mysqluser != "`id -un`" ]
	then
		if [ "`id -un`" = "root" ]
		then
			chown -R ${mysqluser}:${mysqluser} ${mysqlbackupdatadir}
			mysqlrightsok=1
		elif [ "`which sudo`" != "" ]
			then
				sudo chown -R ${mysqluser}:${mysqluser} ${mysqlbackupdatadir}
				sudo="sudo"
				mysqlrightsok=1
		else
			echo "You will need to run chown -R ${mysqluser}:${mysqluser} ${mysqlbackupdatadir} as root." \
			" And then ${mysqlinstalldir}bin/mysql_install_db --defaults-file=${mysqlbackupdatadir}/conf/my.cnf"
		fi
	else
		mysqlrightsok=1
	fi
	if [ $mysqlrightsok = "1" ]
	then
		$sudo ${mysqlinstalldir}bin/mysql_install_db --defaults-file=${mysqlbackupdatadir}conf/my.cnf >> $mysqllog 2>&1 || exit 1
	fi
	echo "DONE" | tee -a $mysqllog
fi

#php
if [ $phpbuild = "1" -o $phpreb = "1" ]
then
	echo "START BUILD php-${phpver}" | tee -a $phplog
	if [ "`id -un ${wwwuser} 2>/dev/null`" != "${wwwuser}" \
		-o "`grep -iq '^'${wwwuser}':' /etc/group && echo $? || echo $? 2>/dev/null`" != "0" ]
	then
		echo "Need ${wwwuser} user and ${wwwuser} group."
		exit 1
	fi
	ver="0`autoconf --version 2>/dev/null | head -n 1 | sed 's/^.*\([0-9]\)\.\([0-9][0-9]\)$/\1\2/'`"
	ver=`expr $ver + 1 - 1 2>/dev/null`
	if [ "$ver" -lt "213" ]
	then
		echo "Need autoconf version >= 2.13"
		exit 1
	fi
	if [ "`which g++`" = "" ]
	then
		echo "Need g++"
		exit 1
	fi
	if [ ! -e ${builddir}other/libpng/${pngver} -o $pngreb = "1" ]
	then
		echo "START BUILD libpng-${pngver}" | tee -a $libpngver
		if [ -e libpng-${pngver} ]
		then
			echo -n "Clean libpng-${pngver}..." | tee -a $libpngver
			cd libpng-${pngver}
				make distclean >> $libpngver 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libpngver
		else
			cd ${archdir}
				dl http://sourceforge.net/projects/libpng/files/01-libpng-master/${pngver}/libpng-${pngver}.tar.gz/download libpng-${pngver}.tar.gz $libpngver
			cd $OLDPWD
			echo -n "Unpack libpng-${pngver}..." | tee -a $libpngver
			tar -xzf ${archdir}libpng-${pngver}.tar.gz >> $libpngver 2>&1
			echo "DONE" | tee -a $libpngver
		fi
		echo -n "Make libpng-${pngver}..." | tee -a $libpngver
		cd libpng-${pngver}
			CFLAGS="-I${builddir}other/zlib/${zlibver}/include" \
			LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib -L${builddir}other/zlib/${zlibver}/lib" \
				./configure --prefix=${builddir}other/libpng/${pngver} >> $libpngver 2>&1 && \
			make >> $libpngver 2>&1 && \
			if [ -e ${builddir}other/libpng/${pngver} ]
			then
				mkdir -p ${oldbuilddir}libpng/${pngver}
				mv ${builddir}other/libpng/${pngver} `mktemp -ud ${oldbuilddir}libpng/${pngver}/XXX` >> $libpngver 2>&1
			fi && \
			make install >> $libpngver 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libpngver
		echo "DONE BUILD libpng-${pngver}" | tee -a $libpngver
	fi
	if [ ! -e ${builddir}other/libjpeg/${jpegver} -o $jpegreb = "1" ]
	then
		echo "START BUILD libjpeg-${jpegver}" | tee -a $libjpeglog
		if [ -e jpeg-${jpegver} ]
		then
			echo -n "Clean libjpeg-${jpegver}..." | tee -a $libjpeglog
			cd jpeg-${jpegver}
				make distclean >> $libjpeglog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libjpeglog
		else
			cd ${archdir}
				dl http://www.ijg.org/files/jpegsrc.v${jpegver}.tar.gz jpegsrc.v${jpegver}.tar.gz $libjpeglog
			cd $OLDPWD
			echo -n "Unpack libjpeg-${jpegver}..." | tee -a $libjpeglog
			tar -xzf ${archdir}jpegsrc.v${jpegver}.tar.gz >> $libjpeglog 2>&1
			echo "DONE" | tee -a $libjpeglog
		fi
		echo -n "Make libjpeg-${jpegver}..." | tee -a $libjpeglog
		cd jpeg-${jpegver}
			./configure --prefix=${builddir}other/libjpeg/${jpegver} >> $libjpeglog 2>&1 && \
			make >> $libjpeglog 2>&1 && \
			if [ -e ${builddir}other/libjpeg/${jpegver} ]
			then
				mkdir -p ${oldbuilddir}libjpeg/${jpegver}
				mv ${builddir}other/libjpeg/${jpegver} `mktemp -ud ${oldbuilddir}libjpeg/${jpegver}/XXX` >> $libjpeglog 2>&1
			fi && \
			make install >> $libjpeglog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libjpeglog
		echo "DONE BUILD libjpeg-${jpegver}" | tee -a $libjpeglog
	fi
	if [ ! -e ${builddir}other/libxml2/${libxmlver} -o $libxmlreb = "1" ]
	then
		echo "START BUILD libxml2-${libxmlver}" | tee -a $libxml2log
		if [ -e libxml2-${libxmlver} ]
		then
			echo -n "Clean libxml2-${libxmlver}..." | tee -a $libxml2log
			cd libxml2-${libxmlver}
				make distclean >> $libxml2log 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libxml2log
		else
			cd ${archdir}
				dl http://fr.rpmfind.net/pub/libxml/libxml2-${libxmlver}.tar.gz libxml2-${libxmlver}.tar.gz $libxml2log
			cd $OLDPWD
			echo -n "Unpack libxml2-${libxmlver}..." | tee -a $libxml2log
			tar -xzf ${archdir}libxml2-${libxmlver}.tar.gz >> $libxml2log 2>&1
			echo "DONE"
		fi
		echo -n "Make libxml2-${libxmlver}..." | tee -a $libxml2log
		cd libxml2-${libxmlver}
			LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib" ./configure \
				--prefix=${builddir}other/libxml2/${libxmlver} \
				--with-zlib=${builddir}other/zlib/${zlibver} >> $libxml2log 2>&1 && \
			make >> $libxml2log 2>&1 && \
			if [ -e ${builddir}other/libxml2/${libxmlver} ]
			then
				mkdir -p ${oldbuilddir}libxml2/${libxmlver}
				mv ${builddir}other/libxml2/${libxmlver} `mktemp -ud ${oldbuilddir}libxml2/${libxmlver}/XXX` >> $libxml2log 2>&1
			fi && \
			make install >> $libxml2log 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libxml2log
		echo "DONE BUILD libxml2-${libxmlver}" | tee -a $libxml2log
	fi
	if [ ! -e ${builddir}other/mhash/${mhashver} -o $mhashreb = "1" ]
	then
		echo "START BUILD mhash-${mhashver}" | tee -a $mhashlog
		if [ -e mhash-${mhashver} ]
		then
			echo -n "Clean mhash-${mhashver}..." | tee -a $mhashlog
			cd mhash-${mhashver}
				make distclean >> $mhashlog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $mhashlog
		else
			cd ${archdir}
				dl http://sourceforge.net/projects/mhash/files/mhash/${mhashver}/mhash-${mhashver}.tar.gz/download mhash-${mhashver}.tar.gz $mhashlog
			cd $OLDPWD
			echo -n "Unpack mhash-${mhashver}..." | tee -a $mhashlog
			tar -xzf ${archdir}mhash-${mhashver}.tar.gz >> $mhashlog 2>&1
			echo "DONE" | tee -a $mhashlog
		fi
		echo -n "Make mhash-${mhashver}..." | tee -a $mhashlog
		cd mhash-${mhashver}
			./configure --prefix=${builddir}other/mhash/${mhashver} >> $mhashlog 2>&1 && \
			make >> $mhashlog 2>&1 && \
			if [ -e ${builddir}other/mhash/${mhashver} ]
			then
				mkdir -p ${oldbuilddir}mhash/${mhashver}
				mv ${builddir}other/mhash/${mhashver} `mktemp -ud ${oldbuilddir}mhash/${mhashver}/XXX` >> $mhashlog 2>&1
			fi && \
			make install >> $mhashlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $mhashlog
		echo "DONE BUILD mhash-${mhashver}" | tee -a $mhashlog
	fi
	if [ ! -e ${builddir}other/libmcrypt/${mcryptver} -o $mcryptreb = "1" ]
	then
		echo "START BUILD libmcrypt-${mcryptver}" | tee -a $libmcryplog
		if [ -e libmcrypt-${mcryptver} ]
		then
			echo -n "Clean libmcrypt-${mcryptver}..." | tee -a $libmcryplog
			cd libmcrypt-${mcryptver}
				make distclean >> $libmcryplog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libmcryplog
		else
			cd ${archdir}
				dl http://sourceforge.net/projects/mcrypt/files/Libmcrypt/${mcryptver}/libmcrypt-${mcryptver}.tar.gz/download libmcrypt-${mcryptver}.tar.gz $libmcryplog
			cd $OLDPWD
			echo -n "Unpack libmcrypt-${mcryptver}..." | tee -a $libmcryplog
			tar -xzf ${archdir}libmcrypt-${mcryptver}.tar.gz >> $libmcryplog 2>&1
			echo "DONE" | tee -a $libmcryplog
		fi
		echo -n "Make libmcrypt-${mcryptver}..." | tee -a $libmcryplog
		cd libmcrypt-${mcryptver}
			./configure --prefix=${builddir}other/libmcrypt/${mcryptver} >> $libmcryplog 2>&1 && \
			make >> $libmcryplog 2>&1 && \
			if [ -e ${builddir}other/libmcrypt/${mcryptver} ]
			then
				mkdir -p ${oldbuilddir}libmcrypt/${mcryptver}
				mv ${builddir}other/libmcrypt/${mcryptver} `mktemp -ud ${oldbuilddir}libmcrypt/${mcryptver}/XXX` >> $libmcryplog 2>&1
			fi && \
			make install >> $libmcryplog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libmcryplog
		echo "DONE BUILD libmcrypt-${mcryptver}" | tee -a $libmcryplog
	fi
	if [ ! -e ${builddir}other/libevent/${eventver} -o $eventreb = "1" ]
	then
		echo "START BUILD libevent-${eventver}" | tee -a $libeventlog
		if [ -e libevent-${eventver} ]
		then
			echo -n "Clean libevent-${eventver}..." | tee -a $libeventlog
			cd libevent-${eventver}
				make distclean >> $libeventlog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libeventlog
		else
			cd ${archdir}
				dl http://www.monkey.org/~provos/libevent-${eventver}.tar.gz libevent-${eventver}.tar.gz $libeventlog
			cd $OLDPWD
			echo -n "Unpack libevent-${eventver}..." | tee -a $libeventlog
			tar -xzf ${archdir}libevent-${eventver}.tar.gz >> $libeventlog 2>&1
			echo "DONE" | tee -a $libeventlog
		fi
		echo -n "Make libevent-${eventver}..." | tee -a $libeventlog
		cd libevent-${eventver}
			./configure --prefix=${builddir}other/libevent/${eventver} >> $libeventlog 2>&1 && \
			make >> $libeventlog 2>&1 && \
			if [ -e ${builddir}other/libevent/${eventver} ]
			then
				mkdir -p ${oldbuilddir}libevent/${eventver}
				mv ${builddir}other/libevent/${eventver} `mktemp -ud ${oldbuilddir}libevent/${eventver}/XXX` >> $libeventlog 2>&1
			fi && \
			make install >> $libeventlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libeventlog
		echo "DONE BUILD libevent-${eventver}" | tee -a $libeventlog
	fi
	if [ ! -e ${builddir}other/libiconv/${iconvver} -o $iconvreb = "1" ]
	then
		echo "START BUILD libiconv-${iconvver}" | tee -a $libiconvlog
		if [ -e libiconv-${iconvver} ]
		then
			echo -n "Clean libiconv-${iconvver}..." | tee -a $libiconvlog
			cd libiconv-${iconvver}
				make distclean >> $libiconvlog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $libiconvlog
		else
			cd ${archdir}
				dl http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${iconvver}.tar.gz libiconv-${iconvver}.tar.gz $libiconvlog
			cd $OLDPWD
			echo -n "Unpack libiconv-${iconvver}..." | tee -a $libiconvlog
			tar -xzf ${archdir}libiconv-${iconvver}.tar.gz >> $libiconvlog 2>&1
			echo "DONE" | tee -a $libiconvlog
		fi
		echo -n "Make libiconv-${iconvver}..." | tee -a $libiconvlog
		cd libiconv-${iconvver}
			./configure --prefix=${builddir}other/libiconv/${iconvver} >> $libiconvlog 2>&1 && \
			make >> $libiconvlog 2>&1 && \
			if [ -e ${builddir}other/libiconv/${iconvver} ]
			then
				mkdir -p ${oldbuilddir}libiconv/${iconvver}
				mv ${builddir}other/libiconv/${iconvver} `mktemp -ud ${oldbuilddir}libiconv/${iconvver}/XXX` >> $libiconvlog 2>&1
			fi && \
			make install >> $libiconvlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $libiconvlog
		echo "DONE BUILD libiconv-${iconvver}" | tee -a $libiconvlog
	fi
	if [ ! -e ${builddir}other/curl/${curlver} -o $curlreb = "1" ]
	then
		echo "START BUILD curl-${curlver}" | tee -a $curllog
		if [ -e curl-${curlver} ]
		then
			echo -n "Clean curl-${curlver}..." | tee -a $curllog
			cd curl-${curlver}
				make distclean >> $curllog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $curllog
		else
			cd ${archdir}
				dl http://curl.haxx.se/download/curl-${curlver}.tar.gz curl-${curlver}.tar.gz $curllog
			cd $OLDPWD
			echo -n "Unpack curl-${curlver}..." | tee -a $curllog
			tar -xzf ${archdir}curl-${curlver}.tar.gz >> $curllog 2>&1
			echo "DONE" | tee -a $curllog
		fi
		echo -n "Make curl-${curlver}..." | tee -a $curllog
		cd curl-${curlver}
			LDFLAGS="-Wl,-rpath -Wl,${builddir}other/openssl/${opensslver}/lib -Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib" \
			./configure --prefix=${builddir}other/curl/${curlver} \
				--disable-debug \
				--enable-optimize \
				--disable-warnings \
				--disable-curldebug \
				--disable-ares \
				--enable-http \
				--enable-ftp \
				--disable-file \
				--enable-ldaps \
				--disable-ldaps \
				--disable-rtsp \
				--enable-proxy \
				--disable-dict \
				--disable-telnet \
				--disable-tftp \
				--disable-pop3 \
				--disable-imap \
				--disable-smtp \
				--disable-manual \
				--disable-ipv6 \
				--enable-nonblocking \
				--enable-threaded-resolver \
				--enable-verbose \
				--disable-sspi \
				--enable-crypto-auth \
				--enable-cookies \
				--without-libssh2 \
				--without-librtmp \
				--with-zlib=${builddir}other/zlib/${zlibver} \
				--with-ssl=${builddir}other/openssl/${opensslver} \
				--without-gnutls \
				--without-polarssl \
				--without-nss \
				--without-ca-bundle \
				--without-ca-path \
				--without-libidn >> $curllog 2>&1 && \
			make >> $curllog 2>&1 &&\
			if [ -e ${builddir}other/curl/${curlver} ]
			then
				mkdir -p ${oldbuilddir}curl/${curlver}
				mv ${builddir}other/curl/${curlver} `mktemp -ud ${oldbuilddir}curl/${curlver}/XXX` >> $curllog 2>&1
			fi && \
			make install >> $curllog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $curllog
		echo "DONE BUILD curl-${curlver}" | tee -a $curllog
	fi

	if [ -e php-${phpver} ]
	then
		echo -n "Clean php-${phpver}..." | tee -a $phplog
		cd php-${phpver}
			make distclean >> $phplog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $phplog
	else
		if [ ! -e eaccelerator-${eaccver} ]
		then
			cd ${archdir}
				dl http://bart.eaccelerator.net/source/${eaccver}/eaccelerator-${eaccver}.tar.bz2 eaccelerator-${eaccver}.tar.bz2 $phplog
			cd $OLDPWD
			echo -n "Unpack eaccelerator-${eaccver}..." | tee -a $phplog
			tar -xjf ${archdir}eaccelerator-${eaccver}.tar.bz2 >> $phplog 2>&1
			echo "DONE" | tee -a $phplog
		fi
		cd ${archdir}
			dl http://php.net/get/php-${phpver}.tar.gz/from/de.php.net/mirror php-${phpver}.tar.gz $phplog
		cd $OLDPWD
		echo -n "Unpack php-${phpver}..." | tee -a $phplog
		tar -xzf ${archdir}php-${phpver}.tar.gz >> $phplog 2>&1
		echo "DONE" | tee -a $phplog
		echo -n "Buildconf php-${phpver}..." | tee -a $phplog
		cd php-${phpver}
			cp -r ../eaccelerator-${eaccver} ext/eaccelerator
			./buildconf --force >> $phplog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $phplog
	fi

	rmdata=0
	if [ ! -e ${phpdatadir} ]
	then
		rmdata=1
	fi
	echo -n "Make php-${phpver}..." | tee -a $phplog
	cd php-${phpver}
		./configure --prefix=${builddir}main/php/${phpver} \
			--disable-all \
			--enable-dom \
			--enable-eaccelerator \
			--enable-fpm \
			--enable-ftp \
			--enable-libxml \
			--enable-mbstring \
			--enable-pdo \
			--enable-session \
			--enable-simplexml \
			--enable-soap \
			--enable-sockets \
			--enable-xml \
			--sysconfdir=${phpdatadir}conf \
			--with-config-file-path=${phpdatadir}conf \
			--with-curl=${builddir}other/curl/${curlver} \
			--with-gd \
			--with-iconv \
			--enable-ctype \
			--with-iconv-dir=${builddir}other/libiconv/${iconvver} \
			--with-jpeg-dir=${builddir}other/libjpeg/${jpegver} \
			--with-libevent-dir=${builddir}other/libevent/${eventver} \
			--with-libxml-dir=${builddir}other/libxml2/${libxmlver} \
			--with-mcrypt=${builddir}other/libmcrypt/${mcryptver} \
			--with-mhash=${builddir}other/mhash/${mhashver} \
			--with-mysql=${builddir}main/mysql/${mysqlfullver}/ \
			--with-mysqli=${builddir}main/mysql/${mysqlfullver}/bin/mysql_config \
			--with-openssl=${builddir}other/openssl/${opensslver} \
			--with-pcre-regex \
			--with-pdo-mysql=${builddir}main/mysql/${mysqlfullver}/ \
			--with-png-dir=${builddir}other/libpng/${pngver} \
			--with-zlib=${builddir}other/zlib/${zlibver} \
			--without-pear >> $phplog 2>&1 && \
		make >> $phplog 2>&1 &&	\
		if [ -e ${builddir}main/php/${phpver} ]
		then
			mkdir -p ${oldbuilddir}php/${phpver}
			mv ${builddir}main/php/${phpver} `mktemp -ud ${oldbuilddir}php/${phpver}/XXX` >> $phplog 2>&1
		fi && \
		make install >> $phplog 2>&1 || exit 1
	cd $OLDPWD
	if [ $rmdata = "1" ]
	then
		rm -rf ${phpdatadir}
	fi
	if [ $phpsym = "1" ]
	then
		cd ${builddir}
			rm -f php
			ln -s main/php/${phpver} php
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $phplog
	echo "DONE BUILD php-${phpver}" | tee -a $phplog
fi
if [ $phpconf = "1" -a ! -e ${phpdatadir} ]
then
	echo -n "Configure php-${phpver}..." | tee -a $phplog
	export phpdir=${builddir}php/
	mkdir -p ${phpdatadir}tmp
	mkdir -p ${phpdatadir}conf
	mkdir -p ${phpdatadir}log
	${scriptdir}/conf/php/php-fpm.conf.sh > ${phpdatadir}conf/php-fpm.conf
	${scriptdir}/conf/php/init.d.sh > ${phpdatadir}init.d
	chmod 755 ${phpdatadir}init.d
	echo "DONE" | tee -a $phplog
fi

if [ $subversionbuild = "1" -o $subversionreb = "1" ]
then
	echo "START BUILD subversion-${subversionver}" | tee -a $subversionlog
	if [ ! -e ${builddir}other/apr/${aprver} -o $aprreb = "1" ]
	then
		echo "START BUILD apr-${aprver}" | tee -a $aprlog
		if [ -e apr-${aprver} ]
		then
			echo -n "Clean apr-${aprver}..." | tee -a $aprlog
			cd apr-${aprver}
				make distclean >> $aprlog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $aprlog
		else
			cd ${archdir}
				dl http://apache.infocom.ua/apr/apr-${aprver}.tar.gz apr-${aprver}.tar.gz $aprlog
			cd $OLDPWD
			echo -n "Unpack apr-${aprver}..." | tee -a $aprlog
			tar -xzf ${archdir}apr-${aprver}.tar.gz >> $aprlog 2>&1
			echo "DONE" | tee -a $aprlog
		fi
		echo -n "Make apr-${aprver}..." | tee -a $aprlog
		cd apr-${aprver}
			./configure --prefix=${builddir}other/apr/${aprver} >> $aprlog 2>&1 && \
			make >> $aprlog 2>&1 && \
			if [ -e ${builddir}other/apr/${aprver} ]
			then
				mkdir -p ${oldbuilddir}apr/${aprver}
				mv ${builddir}other/apr/${aprver} `mktemp -ud ${oldbuilddir}apr/${aprver}/XXX` >> $aprlog 2>&1
			fi && \
			make install >> $aprlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $aprlog
		echo "DONE BUILD apr-${aprver}" | tee -a $aprlog
	fi
	if [ ! -e ${builddir}other/apr-util/${aprutilver} -o $aprutilreb = "1" ]
	then
		echo "START BUILD apr-util-${aprutilver}" | tee -a $aprutillog
		if [ -e apr-util-${aprutilver} ]
		then
			echo -n "Clean apr-util-${aprutilver}..." | tee -a $aprutillog
			cd apr-util-${aprutilver}
				make distclean >> $aprutillog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $aprutillog
		else
			cd ${archdir}
				dl http://apache.infocom.ua/apr/apr-util-${aprutilver}.tar.gz apr-util-${aprutilver}.tar.gz $aprutillog
			cd $OLDPWD
			echo -n "Unpack apr-util-${aprutilver}..." | tee -a $aprutillog
			tar -xzf ${archdir}apr-util-${aprutilver}.tar.gz >> $aprutillog 2>&1
			echo "DONE" | tee -a $aprutillog
		fi
		echo -n "Make apr-util-${aprutilver}..." | tee -a $aprutillog
		cd apr-util-${aprutilver}
			./configure --prefix=${builddir}other/apr-util/${aprutilver} --with-apr=${builddir}other/apr/${aprver} >> $aprutillog 2>&1 && \
			make >> $aprutillog 2>&1 && \
			if [ -e ${builddir}other/apr-util/${aprutilver} ]
			then
				mkdir -p ${oldbuilddir}apr-util/${aprutilver}
				mv ${builddir}other/apr-util/${aprutilver} `mktemp -ud ${oldbuilddir}apr-util/${aprutilver}/XXX` >> $aprutillog 2>&1
			fi && \
			make install >> $aprutillog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $aprutillog
		echo "DONE BUILD apr-util-${aprutilver}" | tee -a $aprutillog
	fi
	if [ ! -e ${builddir}other/neon/${neonver} -o $neonreb = "1" ]
	then
		echo "START BUILD neon-${neonver}" | tee -a $neonlog
		if [ -e neon-${neonver} ]
		then
			echo -n "Clean neon-${neonver}..." | tee -a $neonlog
			cd neon-${neonver}
				make distclean >> $neonlog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $neonlog
		else
			cd ${archdir}
				dl http://www.webdav.org/neon/neon-${neonver}.tar.gz neon-${neonver}.tar.gz $neonlog
			cd $OLDPWD
			echo -n "Unpack neon-${neonver}..." | tee -a $neonlog
			tar -xzf ${archdir}neon-${neonver}.tar.gz >> $neonlog 2>&1
			echo "DONE" | tee -a $neonlog
		fi
		echo -n "Make neon-${neonver}..." | tee -a $neonlog
		cd neon-${neonver}
			PATH="${PATH}:${builddir}other/libxml2/${libxmlver}/bin" \
				./configure --prefix=${builddir}other/neon/${neonver} \
				--with-ssl=openssl \
				--with-libs=${builddir}other/zlib/${zlibver}:${builddir}other/openssl/${opensslver} \
				--without-gssapi >> $neonlog 2>&1 && \
			make >> $neonlog 2>&1 && \
			if [ -e ${builddir}other/neon/${neonver} ]
			then
				mkdir -p ${oldbuilddir}neon/${neonver}
				mv ${builddir}other/neon/${neonver} `mktemp -ud ${oldbuilddir}neon/${neonver}/XXX` >> $neonlog 2>&1
			fi && \
			make install >> $neonlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $neonlog
		echo "DONE BUILD neon-${neonver}" | tee -a $neonlog
	fi
	if [ ! -e ${builddir}other/sqlite/${sqlitever} -o $sqlitereb = "1" ]
	then
		echo "START BUILD sqlite-${sqlitever}" | tee -a $sqlitelog
		if [ -e sqlite-${sqlitever} ]
		then
			echo -n "Clean sqlite-${sqlitever}..." | tee -a $sqlitelog
			cd sqlite-${sqlitever}
				make distclean >> $sqlitelog 2>&1
			cd $OLDPWD
			echo "DONE" | tee -a $sqlitelog
		else
			cd ${archdir}
				dl http://www.sqlite.org/sqlite-amalgamation-${sqlitever}.tar.gz sqlite-${sqlitever}.tar.gz $sqlitelog
			cd $OLDPWD
			echo -n "Unpack sqlite-${sqlitever}..." | tee -a $sqlitelog
			tar -xzf ${archdir}sqlite-${sqlitever}.tar.gz >> $sqlitelog 2>&1
			echo "DONE" | tee -a $sqlitelog
		fi
		echo -n "Make sqlite-${sqlitever}..." | tee -a $sqlitelog
		cd sqlite-${sqlitever}
			./configure --prefix=${builddir}other/sqlite/${sqlitever} >> $sqlitelog 2>&1 && \
			make >> $sqlitelog 2>&1 && \
			if [ -e ${builddir}other/sqlite/${sqlitever} ]
			then
				mkdir -p ${oldbuilddir}sqlite/${sqlitever}
				mv ${builddir}other/sqlite/${sqlitever} `mktemp -ud ${oldbuilddir}sqlite/${sqlitever}/XXX` >> $sqlitelog 2>&1
			fi && \
			make install >> $sqlitelog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $sqlitelog
		echo "DONE BUILD sqlite-${sqlitever}" | tee -a $sqlitelog
	fi
	if [ -e subversion-${subversionver} ]
	then
		echo -n "Clean subversion-${subversionver}..." | tee -a $subversionlog
		cd subversion-${subversionver}
			make distclean >> $subversionlog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $subversionlog
	else
		cd ${archdir}
			dl http://subversion.tigris.org/downloads/subversion-${subversionver}.tar.gz subversion-${subversionver}.tar.gz $subversionlog
		cd $OLDPWD
		echo -n "Unpack subversion-${subversionver}..." | tee -a $subversionlog
		tar -xzf ${archdir}subversion-${subversionver}.tar.gz >> $subversionlog 2>&1
		echo "DONE" | tee -a $subversionlog
	fi
	echo -n "Make subversion-${subversionver}..." | tee -a $subversionlog
	cd subversion-${subversionver}
		LDFLAGS="-L${builddir}other/zlib/${zlibver}/lib -L${builddir}other/openssl/${opensslver}/lib -L${builddir}other/apr-util/${aprutilver}/lib \
			-L${builddir}other/apr/${aprver}/lib \
			-L${builddir}other/sqlite/${sqlitever}/lib \
			-L${builddir}other/neon/${neonver}/lib \
			-Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib \
			-Wl,-rpath -Wl,${builddir}other/sqlite/${sqlitever}/lib \
			-Wl,-rpath -Wl,${builddir}other/openssl/${opensslver}/lib" \
			./configure --prefix=${builddir}main/subversion/${subversionver} \
			--with-apr=${builddir}other/apr/${aprver} \
			--with-apr-util=${builddir}other/apr-util/${aprutilver} \
			--with-sqlite=${builddir}other/sqlite/${sqlitever} \
			--with-zlib=${builddir}other/zlib/${zlibver} \
			--disable-nls \
			--disable-debug \
			--enable-all-static \
			--with-neon=${builddir}other/neon/${neonver} >> $subversionlog 2>&1 && \
		make >> $subversionlog 2>&1 && \
		if [ -e ${builddir}subversion/${subversionver} ]
		then
			mkdir -p ${oldbuilddir}subversion/${subversionver}
			mv ${builddir}subversion/${subversionver} `mktemp -ud ${oldbuilddir}subversion/${subversionver}/XXX` >> $subversionlog 2>&1
		fi && \
		make install >> $subversionlog 2>&1 || exit 1
	cd $OLDPWD
	if [ $subversionsym = "1" ]
	then
		cd ${builddir}
			rm -f subversion
			ln -s main/subversion/${subversionver} subversion
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $subversionlog
	echo "DONE BUILD subversion-${subversionver}" | tee -a $subversionlog
fi

#rsync
if [ $rsyncbuild = "1" -o $rsyncreb = "1" ]
then
	echo "START BUILD rsync-${rsyncver}" | tee -a $rsynclog
	if [ -e rsync-${rsyncver} ]
	then
		echo -n "Clean rsync-${rsyncver}..." | tee -a $rsynclog
		cd rsync-${rsyncver}
			make distclean >> $rsynclog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $rsynclog
	else
		cd $archdir
			dl http://www.samba.org/ftp/rsync/src/rsync-${rsyncver}.tar.gz rsync-${rsyncver}.tar.gz $rsynclog
		cd $OLDPWD
		echo -n "Unpack rsync-${rsyncver}..." | tee -a $rsynclog
		tar -xzvf ${archdir}rsync-${rsyncver}.tar.gz >> $rsynclog 2>&1
		echo "DONE" | tee -a $rsynclog
	fi
	echo -n "Make rsync-${rsyncver}..." | tee -a $rsynclog
	cd rsync-${rsyncver}/
		./configure --prefix=${builddir}main/rsync/${rsyncver} >> $rsynclog 2>&1 && \
		make >> $rsynclog 2>&1 && \
		if [ -e ${builddir}main/rsync/${rsyncver} ]
		then
			mkdir -p  ${oldbuilddir}rsync/${rsyncver}
			mv ${builddir}main/rsync/${rsyncver} `mktemp -ud ${oldbuilddir}rsync/${rsyncver}/XXX` >> $rsynclog 2>&1
		fi && \
		make install >> $rsynclog 2>&1 || exit 1
	if [ $rsyncsym = "1" ]
	then
		cd ${builddir}
			rm -f rsync
			ln -s main/rsync/${rsyncver} rsync
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $rsynclog
	echo "DONE BUILD rsync-${rsyncver}" | tee -a $rsynclog
fi

#postfix
if [ $postfixbuild = "1" -o $postfixreb = "1" ]
then
	echo "START BUILD postfix-${postfixver}" | tee -a $postfixlog
	if [ "`id -un ${postfixuser} 2>/dev/null`" != "${postfixuser}" \
		-o "`grep -iq '^'${postdropgroup}':' /etc/group && echo $? || echo $? 2>/dev/null`" != "0" ]
	then
		echo "Need ${postfixuser} user and ${postdropgroup} group"
		exit 1
	fi
	if [ -e postfix-${postfixver} ]
	then
		echo -n "Clean postfix-${postfixver}..." | tee -a $postfixlog
		cd postfix-${postfixver}
			make tidy >> $postfixlog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $postfixlog
	else
		cd $archdir
			dl http://www.artfiles.org/postfix.org/postfix-release/official/postfix-${postfixver}.tar.gz \
				postfix-${postfixver}.tar.gz $postfixlog
		cd $OLDPWD
		echo -n "Unpack postfix-${postfixver}..." | tee -a $postfixlog
		tar -xzvf ${archdir}postfix-${postfixver}.tar.gz >> $postfixlog 2>&1
		echo "DONE" | tee -a $postfixlog
	fi
	echo -n "Make postfix-${postfixver}..." | tee -a $postfixlog
	postfixdatadir=${datadir}postfix/
	export postfixbuilddir=${builddir}main/postfix/${postfixver}/
	confexist=0
	if [ -e ${postfixdatadir}conf/ ]
	then
		confexist=1
	fi
	cd postfix-${postfixver}/
		make makefiles CCARGS='-DDEF_CONFIG_DIR=\"'${postfixdatadir}'conf/\" \
			-DEF_COMMAND_DIR=\"'${postfixbuilddir}'bin/\" \
			-DEF_DAEMON_DIR=\"'${postfixbuilddir}'daemon/\" \
			-DEF_DATA_DIR=\"'${postfixdatadir}'data/\" \
			-DEF_MAILQ_PATH=\"'${postfixbuilddir}'bin/mailq\" \
			-DEF_HTML_DIR=\"'${postfixbuilddir}'html/\" \
			-DEF_MANPAGE_DIR=\"'${postfixbuilddir}'man/\" \
			-DEF_NEWALIAS_PATH=\"'${postfixbuilddir}'bin/newaliases\" \
			-DEF_QUEUE_DIR=\"'${postfixdatadir}'queue/\" \
			-DEF_README_DIR=\"'${postfixbuilddir}'readme/\" \
			-DEF_SENDMAIL_PATH=\"'${postfixbuilddir}'bin/sendmail\"' >> $postfixlog 2>&1 && \
		make >> $postfixlog 2>&1 && \
		if [ -e ${builddir}main/postfix/${postfixver} ]
		then
			mkdir -p  ${oldbuilddir}postfix/${postfixver}
			mv ${builddir}main/postfix/${postfixver} `mktemp -ud ${oldbuilddir}postfix/${postfixver}/XXX` >> $postfixlog 2>&1
		fi && \
		/bin/sh ./postfix-install \
			-non-interactive \
			install_root=/ \
			tempdir=${postfixdatadir}tmp/ \
			config_directory=${postfixdatadir}conf/ \
			data_directory=${postfixdatadir}data/ \
			daemon_directory=${postfixbuilddir}bin/ \
			command_directory=${postfixbuilddir}bin/ \
			html_directory=${postfixbuilddir}html/ \
			queue_directory=${postfixdatadir}queue/ \
			sendmail_path=${postfixbuilddir}bin/sendmail \
			newaliases_path=${postfixbuilddir}bin/newaliases \
			mailq_path=${postfixbuilddir}bin/mailq \
			mail_owner=${postfixuser} \
			setgid_group=${postdropgroup} \
			manpage_directory=${postfixbuilddir}man/ \
			sample_directory=${postfixbuilddir}sample/ \
			readme_directory=${postfixbuilddir}readme/ >> $postfixlog 2>&1 || exit 1
	if [ $postfixsym = "1" ]
	then
		export postfixbuilddir=${builddir}postfix/
		cd ${builddir}
			rm -f postfix
			ln -s main/postfix/${postfixver} postfix
		cd $OLDPWD
		if [ $confexist = "0" ]
		then
			sed 's/main\/postfix\/'${postfixver}'/postfix/' ${postfixdatadir}conf/main.cf > ${postfixdatadir}tmp/main.cf.tmp \
				&& mv ${postfixdatadir}tmp/main.cf.tmp ${postfixdatadir}conf/main.cf
		fi
	fi
	${scriptdir}/conf/postfix/init.d.sh > ${postfixdatadir}init.d
	chmod 755 ${postfixdatadir}init.d
	echo "DONE" | tee -a $postfixlog
	echo "DONE BUILD postfix-${postfixver}" | tee -a $postfixlog
fi
#dkim-milter
if [ $dkimbuild = "1" -o $dkimreb = "1" ]
then
	echo "START BUILD dkim-milter-${dkimver}" | tee -a $dkimlog
	if [ ! -e sendmail-${sendmailver} ]
	then
		cd $archdir
			dl http://sendmail.cybermirror.org/sendmail.${sendmailver}.tar.gz sendmail-${sendmailver}.tar.gz $dkimlog
		cd $OLDPWD
		echo -n "Unpack sendmail-${sendmailver}..." | tee -a $dkimlog
		tar -xzvf ${archdir}sendmail-${sendmailver}.tar.gz >> $dkimlog 2>&1
		echo "DONE" | tee -a $dkimlog
	fi
	libmilterbuilddir=`cd sendmail-${sendmailver}/libmilter && ./Build -M && cd $OLDPWD`
	if [ ! -e $libmilterbuilddir -o $libmilterreb = "1" ]
	then
		echo -n "Build libmilter..." | tee -a $dkimlog
		if [ -e $libmilterbuilddir ]
		then
			rm -r `dirname $libmilterbuilddir`
		fi
		cd sendmail-${sendmailver}/libmilter
			./Build >> $dkimlog 2>&1 || exit 1
		cd $OLDPWD
		echo "DONE" | tee -a $dkimlog
	fi
	if [ -e dkim-milter-${dkimver} ]
	then
		echo -n "Clean dkim-milter-${dkimver}..." | tee -a $dkimlog
		cd dkim-milter-${dkimver}
			rm -r $(dirname `cd dkim-filter && ./Build -M && cd $OLDPWD`) >> $dkimlog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $dkimlog
	else
		cd $archdir
			dl http://sourceforge.net/projects/dkim-milter/files/DKIM%20Milter/${dkimver}/dkim-milter-${dkimver}.tar.gz/download \
				dkim-milter-${dkimver}.tar.gz $dkimlog
		cd $OLDPWD
		echo -n "Unpack dkim-milter-${dkimver}..." | tee -a $dkimlog
		tar -xzvf ${archdir}dkim-milter-${dkimver}.tar.gz >> $dkimlog 2>&1
		echo "DONE" | tee -a $dkimlog
	fi
	echo -n "Make dkim-milter-${dkimver}..." | tee -a $dkimlog
	dkimbuilddir=${builddir}main/dkim-milter/${dkimver}/
	cd dkim-milter-${dkimver}/
		cat > devtools/Site/site.config.m4 << EOF &&
		APPENDDEF(\`bld_dkim_filter_INCDIRS', \`-I${srcdir}sendmail-${sendmailver}/include')
		APPENDDEF(\`bld_dkim_filter_LIBDIRS', \`-L${libmilterbuilddir} -L${builddir}other/openssl/${opensslver}/lib')
		define(\`confEBINDIR', \`${dkimbuilddir}bin/')
		define(\`confUBINDIR', \`${dkimbuilddir}bin/')
		define(\`confINSTALL', \`\${BUILDBIN}/install.sh')
		define(\`confUBINOWN',\`""')
		define(\`confUBINGRP',\`""')
		define(\`confMANROOT', \`${dkimbuilddir}man/man')
		define(\`confMANGRP',\`""')
		define(\`confMANOWN',\`""')
		define(\`confLDOPTS',\`-Wl,-rpath -Wl,${builddir}other/openssl/${opensslver}/lib')
EOF
		./Build >> $dkimlog 2>&1 && \
		if [ -e ${dkimbuilddir} ]
		then
			mkdir -p  ${oldbuilddir}dkim-milter/${dkimver}
			mv ${dkimbuilddir} `mktemp -ud ${oldbuilddir}dkim-milter/${dkimver}/XXX` >> $dkimlog 2>&1
		fi && \
		mkdir -p ${dkimbuilddir}/bin >> $dkimlog 2>&1 &&
		mkdir -p ${dkimbuilddir}/man >> $dkimlog 2>&1 &&
		mkdir -p ${dkimbuilddir}/man/man5 >> $dkimlog 2>&1 &&
		mkdir -p ${dkimbuilddir}/man/man8 >> $dkimlog 2>&1 &&
		cd `cd dkim-filter && ./Build -M && cd $OLDPWD` && make install >> $dkimlog 2>&1 || exit
	if [ $dkimsym = "1" ]
	then
		cd ${builddir}
			rm -f dkim-milter
			ln -s main/dkim-milter/${dkimver} dkim-milter
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $dkimlog
	echo "DONE BUILD dkim-milter-${dkimver}" | tee -a $dkimlog
fi

if [ $dkimconf = "1" -a ! -e ${datadir}dkim ]
then
	echo -n "Configure dkim-milter..." | tee -a $dkimlog
	export dkimdatadir=${datadir}dkim/
	mkdir -p ${dkimdatadir}
	mkdir -p ${dkimdatadir}conf
	mkdir -p ${dkimdatadir}key
	export rundir=${datadir}run/
	export dkimbuilddir=${builddir}dkim-milter/
	${scriptdir}/conf/dkim/init.d.sh > ${dkimdatadir}init.d
	${scriptdir}/conf/dkim/dkim.conf.sh > ${dkimdatadir}conf/dkim.conf
	chmod 755 ${datadir}dkim/init.d
	echo "DONE" | tee -a $dkimlog
fi
#fetchmail
if [ $fetchmailbuild = "1" -o $fetchmailreb = "1" ]
then
	echo "START BUILD fetchmail-${fetchmailver}" | tee -a $fetchmaillog
	if [ -e fetchmail-${fetchmailver} ]
	then
		echo -n "Clean fetchmail-${fetchmailver}..." | tee -a $fetchmaillog
		cd fetchmail-${fetchmailver}
			make distclean >> $fetchmaillog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $fetchmaillog
	else
		cd $archdir
			dl http://download2.berlios.de/fetchmail/fetchmail-${fetchmailver}.tar.bz2 fetchmail-${fetchmailver}.tar.bz $fetchmaillog
		cd $OLDPWD
		echo -n "Unpack fetchmail-${fetchmailver}..." | tee -a $fetchmaillog
		tar -xjvf ${archdir}fetchmail-${fetchmailver}.tar.bz >> $fetchmaillog 2>&1
		echo "DONE" | tee -a $fetchmaillog
	fi
	echo -n "Make fetchmail-${fetchmailver}..." | tee -a $fetchmaillog
	cd fetchmail-${fetchmailver}/
		LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib/${zlibver}/lib -Wl,-rpath -Wl,${builddir}openssl/lib" \
		./configure --prefix=${builddir}main/fetchmail/${fetchmailver} --with-ssl=${builddir}openssl >> $fetchmaillog 2>&1 && \
		make >> $fetchmaillog 2>&1 && \
		if [ -e ${builddir}main/fetchmail/${fetchmailver} ]
		then
			mkdir -p  ${oldbuilddir}fetchmail/${fetchmailver}
			mv ${builddir}main/fetchmail/${fetchmailver} `mktemp -ud ${oldbuilddir}fetchmail/${fetchmailver}/XXX` >> $fetchmaillog 2>&1
		fi && \
		make install >> $fetchmaillog 2>&1 || exit 1
	if [ $fetchmailsym = "1" ]
	then
		cd ${builddir}
			rm -f fetchmail
			ln -s main/fetchmail/${fetchmailver} fetchmail
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $fetchmaillog
	echo "DONE BUILD fetchmail-${fetchmailver}" | tee -a $fetchmaillog
fi
#maildrop
if [ $maildropbuild = "1" -o $maildropreb = "1" ]
then
	echo "START BUILD maildrop-${maildropver}" | tee -a $maildroplog
	if [ -e maildrop-${maildropver} ]
	then
		echo -n "Clean maildrop-${maildropver}..." | tee -a $maildroplog
		cd maildrop-${maildropver}
			make distclean >> $maildroplog 2>&1
		cd $OLDPWD
		echo "DONE" | tee -a $maildroplog
	else
		cd $archdir
			dl http://sourceforge.net/projects/courier/files/maildrop/${maildropver}/maildrop-${maildropver}.tar.bz2/download \
				maildrop-${maildropver}.tar.bz $maildroplog
		cd $OLDPWD
		echo -n "Unpack maildrop-${maildropver}..." | tee -a $maildroplog
		tar -xjvf ${archdir}maildrop-${maildropver}.tar.bz >> $maildroplog 2>&1
		echo "DONE" | tee -a $maildroplog
	fi
	echo -n "Make maildrop-${maildropver}..." | tee -a $maildroplog
	cd maildrop-${maildropver}/
		LDFLAGS="-Wl,-rpath -Wl,${builddir}other/pcre/${pcrever}/lib" \
		CFLAGS="-I${builddir}other/pcre/${pcrever}/include -L${builddir}other/pcre/${pcrever}/lib" \
		CXXFLAGS="-I${builddir}other/pcre/${pcrever}/include -L${builddir}other/pcre/${pcrever}/lib" \
		./configure --prefix=${builddir}main/maildrop/${maildropver} --disable-authlib >> $maildroplog 2>&1 && \
		make >> $maildroplog 2>&1 && \
		if [ -e ${builddir}main/maildrop/${maildropver} ]
		then
			mkdir -p  ${oldbuilddir}maildrop/${maildropver}
			mv ${builddir}main/maildrop/${maildropver} `mktemp -ud ${oldbuilddir}maildrop/${maildropver}/XXX` >> $maildroplog 2>&1
		fi && \
		make install >> $maildroplog 2>&1 || exit 1
	if [ $maildropsym = "1" ]
	then
		cd ${builddir}
			rm -f maildrop
			ln -s main/maildrop/${maildropver} maildrop
		cd $OLDPWD
	fi
	echo "DONE" | tee -a $maildroplog
	echo "DONE BUILD maildrop-${maildropver}" | tee -a $maildroplog
fi

exit 0
