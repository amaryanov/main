#!/bin/sh

#Used variables: slavedir, masterdir, host, port, user, rsync, mysqlbinlog, mysql, mycnf, backupmasterlog, mysqlopts

umask 0077

serverdir="/home/www/server/"

rsyncopt="-vrlcpz --ignore-existing --compress-level=9"

lockdircreated=0

end()
{
	echo $1
	if [ $lockdircreated = "1" ]
	then
		rmdir $mastersyncdir
	fi
	exit 1
}

ends()
{
	echo "$1 Terminating without removing semaphore directory."
	exit 1
}

counter=1
while [ "$counter" -le "$#" ]
do
	var=`eval echo '$'$counter`
	varname=`echo $var | sed 's/\([^=]*\)=\(.*\)/\1/'`
	varval=`echo $var | sed 's/\([^=]*\)=\(.*\)/\2/'`
	eval $varname='$varval' 2>/dev/null
	counter=`expr $counter + 1`
done
if [ "x$masterdir" = "x" ]
then
	end 'Need path to master.'
fi

if [ "x$slavedir" = "x" ]
then
	end 'Need path to slave.'
fi

mastersyncdir="$slavedir/log/mastersync"
mkdir $mastersyncdir

if [ "$?" != "0" ]
then
	end "Cant create $mastersyncdir. May be another instance of this script already running,"\
		" or previous terminated without removing semaphore directory."
fi
lockdircreated=1
trap 'end "You terminated the script."' TERM INT

if [ "x$mysqlbinlog" = "x" ]
then
	if [ -e ${serverdir}build/mysql/bin/mysqlbinlog ]
	then
		mysqlbinlog="${serverdir}build/mysql/bin/mysqlbinlog"
	elif [ "x`which mysqlbinlog`" != 'x' ]
	then
		mysqlbinlog="mysqlbinlog"
	else
		end "Need mysqlbinlog."
	fi
fi

if [ "x$mysql" = "x" ]
then
	if [ -e ${serverdir}build/mysql/bin/mysql ]
	then
		mysql="${serverdir}build/mysql/bin/mysql"
	elif [ "x`which mysql`" != 'x' ]
	then
		mysql="mysql"
	else
		end "Need mysql."
	fi
fi

if [ "x$rsync" = "x" ]
then
	if [ -e ${serverdir}build/rsync/bin/rsync ]
	then
		rsync="${serverdir}build/rsync/bin/rsync"
	elif [ "x`which mysqlbinlog`" != 'x' ]
	then
		rsync="rsync"
	else
		end "Need rsync."
	fi
	rsync="$rsync $rsyncopt"
fi
if [ "x$host" != "x" ]
then
	ssh="ssh"
	if [ "x$port" != "x" ]
	then
		ssh="$ssh -p$port"
	fi
	if [ "x$user" != "x" ]
	then
		ssh="$ssh -l$user"
	fi
fi

if [ "x$flushlogs" != "x" ]
then
	flushlogs="$masterdir/init.d flush-logs"
	if [ "x$ssh" != "x" ]
	then
		$ssh $host $flushlogs
	else
		$flushlogs
	fi
	if [ $? != "0" ]
	then
		end "Cant flush master logs."
	fi
fi

if [ "x$ssh" != "x" ]
then
	$rsync -e "$ssh" $host:$masterdir/log/bin/ $slavedir/masterlog/
else
	$rsync $masterdir/log/bin/ $slavedir/masterlog/
fi

if [ "$?" = "0" ]
then
	starttime="`date +%s`"
	for file in `find $slavedir/masterlog/ -size +0 -type f -printf "%f\n" | sort`
	do
		echo $file
		logfile="$slavedir/masterlog/$file"
		sqlfile="$slavedir/sql/$file.sql"
		$mysqlbinlog $logfile > $sqlfile
		if [ "$?" != "0" ]
		then
			ends "Cant create dump from $file"
		fi
		if [ "x$mycnf" != "x" ]
		then
			mysqlopts="$mysqlopts --defaults-file=$mycnf"
		fi
		$mysql $mysqlopts < $sqlfile
		if [ $? != "0" ]
		then
			ends "Cant import $sqlfile"
		fi
		if [ "x$backupmasterlog" != "x" ]
		then
			cp $logfile $slavedir/masterlogbackup/
		fi
		echo -n > $logfile
	done
	for file in $(find . -type f -mmin -$(expr \( `date +%s` - $starttime \) / 60 + 1) -printf "%f\n" | sed 's/\(.*\)\(\.[^\.]\+\)$/\1/' | sort | uniq)
	do
	echo $file
	done
#TODO find updated tables and create dump for them
else
	end "Rsync error($?)."
fi

rmdir $mastersyncdir
exit 0

