#!/bin/bash

#####SCRIPT CONFIG#####
#what to build
nginxbuild=1
mysqlbuild=1
phpbuild=1

#what to configure
nginxconf=1
phpconf=1
mysqlconf=1
#####END SCRIPT CONFIG#####

scriptdir=`dirname $(readlink -f $0)`

topdir=$PWD/
srcdir=${topdir}src/
builddir=${topdir}build/
archdir=${topdir}arch/

nginxver="0.7.67"
phpver="5.2.13"
eaccver="0.9.6.1"
phpfpmver="0.5.14"
zlibver="1.2.5"
opsslver="1.0.0a"
pcrever="8.10"
mysqlver="5.1"
mysqlsubver="49"
mysqlfullver=$mysqlver.$mysqlsubver
curlver="7.21.0"
mcryptver="2.5.8"
mhashver="0.9.9.9"
libxmlver="2.7.7"
iconvver="1.13.1"
jpegver="8b"
pngver="1.4.3"
ncursesver="5.7"

mkdir -p $srcdir
mkdir -p $builddir
mkdir -p $archdir

pushd $srcdir

if [ "$nginxbuild" -eq "1" -o "$phpbuild" -eq "1" -o "$mysqlbuild" -eq "1" ]
then
	if [ -e zlib-${zlibver} ]
	then
		pushd zlib-${zlibver}
			make clean
		popd
	else
		pushd $archdir
			wget -c http://zlib.net/zlib-${zlibver}.tar.gz
		popd
		tar -xzf ${archdir}zlib-${zlibver}.tar.gz
	fi
	if [ "$phpbuild" -eq "1" -o "$mysqlbuild" -eq "1" ]
	then
		pushd zlib-${zlibver}
			./configure --prefix=${builddir}other/zlib-${zlibver} && \
			make && \
			make install && \
			make clean || exit #clean for nginx
		popd
	fi
fi

if [ "$nginxbuild" -eq "1" -o "$phpbuild" -eq "1" ]
then
	if [ -e openssl-${opsslver} ]
	then
		pushd openssl-${opsslver}
			make clean
		popd
	else
		pushd $archdir
			wget -c http://www.openssl.org/source/openssl-${opsslver}.tar.gz
		popd
		tar -xzf ${archdir}openssl-${opsslver}.tar.gz
	fi
	if [ "$phpbuild" -eq "1" ]
	then
		pushd openssl-${opsslver}
			./config --prefix=${builddir}other/openssl-${opsslver} \
				--with-zlib-lib=${builddir}other/zlib-${zlibver}/lib \
				--with-zlib-include=${builddir}other/zlib-${zlibver}/include \
				-Wl,-rpath \
				-Wl,${builddir}other/zlib-${zlibver}/lib \
				threads zlib shared && \
			make && \
			make test && \
			make install && \
			make clean || exit #clean for nginx
		popd
	fi
fi
#nginx
if [ "$nginxbuild" -eq "1" ]
then
	if [ -e "nginx-${nginxver}" ]
	then
		echo "${srcdir}nginx-${nginxver} already exist"
		exit 1
	elif [ -e "${builddir}nginx-${nginxver}" ]
	then
		echo "${builddir}nginx-${nginxver} already exist"
		exit 1
	fi

	pushd $archdir
		wget -c http://sysoev.ru/nginx/nginx-${nginxver}.tar.gz
		wget -c http://downloads.sourceforge.net/project/pcre/pcre/${pcrever}/pcre-${pcrever}.tar.gz
	popd

	tar -xzf ${archdir}nginx-${nginxver}.tar.gz
	tar -xzf ${archdir}pcre-${pcrever}.tar.gz

	pushd nginx-${nginxver}/
		./configure --prefix=${builddir}nginx-${nginxver} \
			--without-poll_module \
			--without-select_module \
			--with-http_ssl_module \
			--without-http_ssi_module \
			--without-http_userid_module \
			--without-http_autoindex_module \
			--without-http_geo_module \
			--without-http_referer_module \
			--without-mail_pop3_module \
			--without-mail_imap_module \
			--without-mail_smtp_module \
			--with-pcre=${srcdir}/pcre-${pcrever} \
			--with-zlib=${srcdir}/zlib-${zlibver} \
			--with-openssl=${srcdir}/openssl-${opsslver} && \
		make && \
		make install || exit
		if [ "$nginxconf" -eq "1" ]
		then
			echo "NGINX CONFIGURATION DOES NOT IMPLEMENTED"
			#configure main and add configs for magento
		fi
	popd
fi

#mysql
if [ "$mysqlbuild" -eq "1" ]
then
	if [ -e "mysql-${mysqlfullver}" ]
	then
		echo "${srcdir}mysql-${mysqlfullver} already exist"
		exit 1
	elif [ -e "${builddir}mysql-${mysqlfullver}" ]
	then
		echo "${builddir}mysql-${mysqlfullver} already exist"
		exit 1
	fi

	pushd ${archdir}
		wget -c http://dev.mysql.com/get/Downloads/MySQL-${mysqlver}/mysql-${mysqlfullver}.tar.gz/from/http://mysql.infocom.ua/
		wget -c http://ftp.gnu.org/pub/gnu/ncurses/ncurses-${ncursesver}.tar.gz
	popd

	tar -xzf ${archdir}ncurses-${ncursesver}.tar.gz
	pushd ncurses-${ncursesver}
		./configure --prefix=${builddir}other/ncurses-${ncursesver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}mysql-${mysqlfullver}.tar.gz

	export mysqldatadir=${builddir}mysql-data/ #export for mysql.conf.sh
	export mysqlinstalldir=${builddir}mysql-${mysqlfullver}/ #export for mysql.conf.sh

	pushd  mysql-${mysqlfullver}
		CFLAGS="-O3" \
			CXX=gcc \
			CXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti" \
			LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib-${zlibver}/lib" \
			./configure --prefix=${mysqlinstalldir} \
				--with-mysqld-ldflags=-all-static \
				--with-client-ldflags=-all-static \
				--enable-assembler \
				--enable-thread-safe-client \
				--with-named-curses-libs=${builddir}other/ncurses-${ncursesver}/lib/libncurses.a \
				--with-charset=utf8 \
				--with-zlib-dir=${builddir}other/zlib-${zlibver} \
				--with-extra-charsets=ascii,cp1251,koi8r,latin1,latin2 \
				--with-plugins=innobase,myisam,partition,myisammrg \
				--with-mysqld-user=mysql \
				--with-unix-socket-path=${mysqldatadir}/var/mysql.sock && \
		make && \
		make install || exit
		if [ "$mysqlconf" -eq "1" ]
		then
			mkdir -p ${mysqldatadir}/etc/
			mkdir -p ${mysqldatadir}/tmp/
			mkdir -p ${mysqldatadir}/var/data/
			mkdir -p ${mysqldatadir}/var/log/
			mkdir -p ${mysqldatadir}/var/log/innodb
			mkdir -p ${mysqldatadir}/var/innodb/
			${scriptdir}/conf/mysql.conf.sh > ${mysqldatadir}/etc/my.cnf
			${mysqlinstalldir}/bin/mysql_install_db --defaults-file=${mysqldatadir}/etc/my.cnf
			#also create db and user for magento
		fi
	popd
fi

#php
if [ "$phpbuild" -eq "1" ]
then
	if [ -z "`which autoconf`" -o -n "`autoconf --version 2>/dev/null | head -n 1 | tr -d '\n' | sed 's/Autoconf version [2-9]\.[1-9][3-9]//'`" ]
	then
		echo "Need autoconf version >= 2.13"
		exit
	fi
	if [ -e "php-${phpver}" ]
	then
		echo "${srcdir}php-${phpver} already exist"
		exit 1
	elif [ -e "${builddir}php-${phpver}" ]
	then
		echo "${builddir}php-${phpver} already exist"
		exit 1
	fi
	pushd ${archdir}
		wget -c http://php.net/get/php-${phpver}.tar.gz/from/de.php.net/mirror
		wget -c http://bart.eaccelerator.net/source/${eaccver}/eaccelerator-${eaccver}.tar.bz2
		wget -c http://php-fpm.org/downloads/php-${phpver}-fpm-${phpfpmver}.diff.gz
		wget -c http://curl.haxx.se/download/curl-${curlver}.tar.gz
		wget -c http://sourceforge.net/projects/mcrypt/files/Libmcrypt/${mcryptver}/libmcrypt-${mcryptver}.tar.gz/download
		wget -c http://sourceforge.net/projects/mhash/files/mhash/${mhashver}/mhash-${mhashver}.tar.gz/download
		wget -c http://fr.rpmfind.net/pub/libxml/libxml2-${libxmlver}.tar.gz
		wget -c http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${iconvver}.tar.gz
		wget -c http://www.ijg.org/files/jpegsrc.v${jpegver}.tar.gz
		wget -c http://sourceforge.net/projects/libpng/files/01-libpng-master/${pngver}/libpng-${pngver}.tar.gz/download
	popd

	tar -xzf ${archdir}libpng-${pngver}.tar.gz
	pushd libpng-${pngver}
		CFLAGS="-I${builddir}other/zlib-${zlibver}/include" \
		LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib-${zlibver}/lib -L${builddir}other/zlib-${zlibver}/lib" \
			./configure --prefix=${builddir}other/libpng-${pngver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}jpegsrc.v${jpegver}.tar.gz
	pushd jpeg-${jpegver}
		./configure --prefix=${builddir}other/libjpeg-${jpegver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}libpng-${pngver}.tar.gz
	pushd libpng-${pngver}
	popd

	tar -xzf ${archdir}libxml2-${libxmlver}.tar.gz
	pushd libxml2-${libxmlver}
		LDFLAGS="-Wl,-rpath -Wl,${builddir}other/zlib-${zlibver}/lib" ./configure \
			--prefix=${builddir}other/libxml2-${libxmlver} \
			--with-zlib=${builddir}other/zlib-${zlibver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}mhash-${mhashver}.tar.gz
	pushd mhash-${mhashver}
		./configure --prefix=${builddir}other/mhash-${mhashver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}libmcrypt-${mcryptver}.tar.gz
	pushd libmcrypt-${mcryptver}
		./configure --prefix=${builddir}other/libmcrypt-${mcryptver} && \
		make && \
		make install || exit
	popd

	tar -xzf ${archdir}curl-${curlver}.tar.gz
	pushd curl-${curlver}
		LDFLAGS="-Wl,-rpath -Wl,${builddir}other/openssl-${opsslver}/lib -Wl,-rpath -Wl,${builddir}other/zlib-${zlibver}/lib" \
		./configure --prefix=${builddir}other/curl-${curlver} \
			--disable-debug \
			--enable-optimize \
			--disable-warnings \
			--disable-curldebug \
			--disable-ares \
			--enable-http \
			--enable-ftp \
			--disable-file \
			--enable-ldaps \
			--disable-ldaps \
			--disable-rtsp \
			--enable-proxy \
			--disable-dict \
			--disable-telnet \
			--disable-tftp \
			--disable-pop3 \
			--disable-imap \
			--disable-smtp \
			--disable-manual \
			--disable-ipv6 \
			--enable-nonblocking \
			--enable-threaded-resolver \
			--enable-verbose \
			--disable-sspi \
			--enable-crypto-auth \
			--enable-cookies \
			--without-libssh2 \
			--without-librtmp \
			--with-zlib=${builddir}other/zlib-${zlibver} \
			--with-ssl=${builddir}other/openssl-${opsslver} \
			--without-gnutls \
			--without-polarssl \
			--without-nss \
			--without-ca-bundle \
			--without-ca-path \
			--without-libidn && \
		make &&\
		make install || exit
	popd

	tar -xzf ${archdir}php-${phpver}.tar.gz
	gzip -fdc ${archdir}php-${phpver}-fpm-${phpfpmver}.diff.gz > php-${phpver}-fpm-${phpfpmver}.diff
	tar -xjf ${archdir}eaccelerator-${eaccver}.tar.bz2

	pushd php-${phpver}
		patch -p1 < ${srcdir}/php-${phpver}-fpm-${phpfpmver}.diff
		cp -r ${srcdir}/eaccelerator-${eaccver} ext/eaccelerator
		./buildconf --force && \
		./configure --prefix=${builddir}php-${phpver} \
			--enable-fastcgi \
			--enable-fpm \
			--disable-all \
			--enable-eaccelerator \
			--with-mysql=${builddir}mysql-${mysqlfullver}/ \
			--with-mysqli=${builddir}mysql-${mysqlfullver}/bin/mysql_config \
			--with-pcre-regex \
			--with-gd \
			--with-mcrypt=${builddir}other/libmcrypt-${mcryptver} \
			--with-mhash=${builddir}other/mhash-${mhashver} \
			--with-curl=${builddir}other/curl-${curlver} \
			--enable-ftp \
			--with-openssl=${builddir}other/openssl-${opsslver} \
			--enable-dom \
			--enable-sockets \
			--with-zlib=${builddir}other/zlib-${zlibver} \
			--with-pear \
			--with-pdo-mysql \
			--enable-soap \
			--with-jpeg-dir=${builddir}other/libjpeg-${jpegver} \
			--with-png-dir=${builddir}other/libpng-${pngver} \
			--enable-mbstring \
			--enable-xml \
			--enable-libxml \
			--with-xml-config=${builddir}other/libxml2-${libxmlver}/bin/xml2-config \
			--with-libxml-dir=${builddir}other/libxml2-${libxmlver} && \
		make &&	\
		make test && \
		make install || exit
		if [ "$phpconf" -eq "1" ]
		then
			export phpdir=${builddir}php-${phpver}/
			${scriptdir}/conf/php-fpm.conf.sh > ${phpdir}etc/php-fpm.conf
			#also add configs to php.ini
		fi
	popd
fi

popd
